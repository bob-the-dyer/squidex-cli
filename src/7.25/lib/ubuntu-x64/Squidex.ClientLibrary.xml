<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Squidex.ClientLibrary</name>
    </assembly>
    <members>
        <member name="T:Squidex.ClientLibrary.BulkResult">
            <summary>
            Represents the result of one <see cref="T:Squidex.ClientLibrary.BulkUpdateJob"/>.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkResult.ContentId">
            <summary>
            The id of the content that has been handled successfully or not.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkResult.JobIndex">
            <summary>
            The index of the bulk job where the result belongs to. The order can change.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkResult.Error">
            <summary>
            The error when the bulk job failed.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.BulkUpdate">
            <summary>
            Represents a bulk update.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdate.Jobs">
            <summary>
            The contents to update or insert.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdate.Publish">
            <summary>
            True to automatically publish the content.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdate.DoNotScript">
            <summary>
            True to turn off scripting for faster inserts. Default: true.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdate.DoNotValidate">
            <summary>
            True to turn off validation for faster inserts. Default: false.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdate.DoNotValidateWorkflow">
            <summary>
            True to turn off validation of workflow rules. Default: false.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdate.CheckReferrers">
            <summary>
            True to check referrers of this content.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdate.OptimizeValidation">
            <summary>
            True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.BulkUpdateJob">
            <summary>
            Represents an job of a bulk operation.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdateJob.Data">
            <summary>
            The data of the content when type is set to 'Upsert', 'Create', 'Update' or 'Patch'.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdateJob.Query">
            <summary>
            An optional query to identify the content to update.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdateJob.Id">
            <summary>
            An optional id of the content to update.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdateJob.Status">
            <summary>
            The new status when the type is set to 'ChangeStatus'.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdateJob.Schema">
            <summary>
            The optional schema id or name.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdateJob.DueTime">
            <summary>
            The due time when the type is set to 'ChangeStatus'.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdateJob.Type">
            <summary>
            The update type.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdateJob.Permanent">
            <summary>
            To delete the content permanently.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdateJob.ExpectedCount">
            <summary>
            The number of expected items. Set it to a higher number to update multiple items when a query is defined.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.BulkUpdateJob.ExpectedVersion">
            <summary>
            The expected version.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.BulkUpdateType">
            <summary>
            The type of the bulk update.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.BulkUpdateType.Upsert">
            <summary>
            Update or create a new content item.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.BulkUpdateType.ChangeStatus">
            <summary>
            Change the status of a content item.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.BulkUpdateType.Delete">
            <summary>
            Delete a content item.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.BulkUpdateType.Create">
            <summary>
            Create a content item.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.BulkUpdateType.Patch">
            <summary>
            Patch a content item.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.BulkUpdateType.Update">
            <summary>
            Update a content item.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.BulkUpdateType.Validate">
            <summary>
            Validate a content item.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.ChangeStatus">
            <summary>
            The request to change a status.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.ChangeStatus.Status">
            <summary>
            The new status.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.ChangeStatus.DueTime">
            <summary>
            The due time.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.ChangeStatus.CheckReferrers">
            <summary>
            True to check referrers of this content.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.Component">
            <summary>
            Holds constants to work with components.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.Component.Discriminator">
            <summary>
            The used discriminator key for components.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.Configuration.AcceptAllCertificatesConfigurator">
            <summary>
            Configures the HTTP client to accept all SSL certificates.
            </summary>
            <seealso cref="T:Squidex.ClientLibrary.Configuration.IHttpConfigurator" />
        </member>
        <member name="F:Squidex.ClientLibrary.Configuration.AcceptAllCertificatesConfigurator.Instance">
            <summary>
            The only instance of this class.
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.AcceptAllCertificatesConfigurator.Configure(System.Net.Http.HttpClient)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.AcceptAllCertificatesConfigurator.Configure(System.Net.Http.HttpClientHandler)">
            <inheritdoc/>
        </member>
        <member name="T:Squidex.ClientLibrary.Configuration.Authenticator">
            <summary>
            THe default implementation of the <see cref="T:Squidex.ClientLibrary.IAuthenticator"/> interface that makes POST
            requests to retrieve the JWT bearer token from the connect endpoint.
            </summary>
            <seealso cref="T:Squidex.ClientLibrary.IAuthenticator" />
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.Authenticator.#ctor(Squidex.ClientLibrary.SquidexOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Squidex.ClientLibrary.Configuration.Authenticator"/> class.
            </summary>
            <param name="options">The options to configure.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="options"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.Authenticator.RemoveTokenAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.Authenticator.GetBearerTokenAsync">
            <inheritdoc/>
        </member>
        <member name="T:Squidex.ClientLibrary.Configuration.CachingAuthenticator">
            <summary>
            An authenticator that stores the JWT token in the memory cache.
            </summary>
            <seealso cref="T:Squidex.ClientLibrary.IAuthenticator" />
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.CachingAuthenticator.#ctor(System.String,Microsoft.Extensions.Caching.Memory.IMemoryCache,Squidex.ClientLibrary.IAuthenticator)">
            <summary>
            Initializes a new instance of the <see cref="T:Squidex.ClientLibrary.Configuration.CachingAuthenticator"/> class with the cache key,
            the memory cache and inner authenticator that does the actual work.
            </summary>
            <param name="cacheKey">The cache key. Cannot be null or empty.</param>
            <param name="cache">The memory cache. Cannot be null.</param>
            <param name="authenticator">The inner authenticator that does the actual work.  Cannot be null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cacheKey"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="cache"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="authenticator"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="cacheKey"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.CachingAuthenticator.GetBearerTokenAsync">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.CachingAuthenticator.RemoveTokenAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.CachingAuthenticator.GetFromCache">
            <summary>
            Gets the current JWT bearer token from the cache.
            </summary>
            <returns>
            The JWT bearer token or null if not found in the cache.
            </returns>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.CachingAuthenticator.RemoveFromCache">
            <summary>
            Removes from current JWT bearer token from the cache.
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.CachingAuthenticator.SetToCache(System.String,System.DateTimeOffset)">
            <summary>
            Sets to the current JWT bearer token.
            </summary>
            <param name="token">The JWT bearer token.</param>
            <param name="expires">The date and time when the token will expire..</param>
        </member>
        <member name="T:Squidex.ClientLibrary.Configuration.GlobalContextClientFactory">
            <summary>
            A <see cref="T:Squidex.ClientLibrary.Configuration.IHttpClientFactory"/> that adds the context options to all requests.
            </summary>
            <seealso cref="T:Squidex.ClientLibrary.Configuration.IHttpClientFactory" />
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.GlobalContextClientFactory.#ctor(Squidex.ClientLibrary.QueryContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Squidex.ClientLibrary.Configuration.GlobalContextClientFactory"/> class with the context to apply.
            </summary>
            <param name="context">The context to apply.</param>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.GlobalContextClientFactory.CreateHttpMessageHandler(System.Net.Http.HttpMessageHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.GlobalContextClientFactory.CreateHttpClient(System.Net.Http.HttpMessageHandler)">
            <inheritdoc/>
        </member>
        <member name="T:Squidex.ClientLibrary.Configuration.IHttpClientFactory">
            <summary>
            Optional interface to create new <see cref="T:System.Net.Http.HttpClient"/> instances.
            </summary>
            <remarks>
            Implement this class if you have custom requirements how the HTTP requests need to be done.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.IHttpClientFactory.CreateHttpClient(System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates the HTTP client from the message.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <returns>
            The HTTP client.
            </returns>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.IHttpClientFactory.CreateHttpMessageHandler(System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates the HTTP message handler from the inner handler.
            </summary>
            <param name="inner">The inner handler.</param>
            <returns>
            The HTTP message handler.
            </returns>
        </member>
        <member name="T:Squidex.ClientLibrary.Configuration.IHttpConfigurator">
            <summary>
            Implement this interface to change the behavior of HTTP requests.
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.IHttpConfigurator.Configure(System.Net.Http.HttpClient)">
            <summary>
            Configures the specified HTTP client.
            </summary>
            <param name="httpClient">The HTTP client to configure.</param>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.IHttpConfigurator.Configure(System.Net.Http.HttpClientHandler)">
            <summary>
            Configures the specified HTTP client handler.
            </summary>
            <param name="httpClientHandler">The HTTP client handler to configure.</param>
        </member>
        <member name="T:Squidex.ClientLibrary.Configuration.NoopHttpConfigurator">
            <summary>
            Default implementation of the <see cref="T:Squidex.ClientLibrary.Configuration.IHttpClientFactory"/> and <see cref="T:Squidex.ClientLibrary.Configuration.IHttpConfigurator"/> that does
            not do anything and provides the default behavior.
            </summary>
            <seealso cref="T:Squidex.ClientLibrary.Configuration.IHttpConfigurator" />
            <seealso cref="T:Squidex.ClientLibrary.Configuration.IHttpClientFactory" />
        </member>
        <member name="F:Squidex.ClientLibrary.Configuration.NoopHttpConfigurator.Instance">
            <summary>
            The only instance of this class.
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.NoopHttpConfigurator.Configure(System.Net.Http.HttpClient)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.NoopHttpConfigurator.Configure(System.Net.Http.HttpClientHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.NoopHttpConfigurator.CreateHttpClient(System.Net.Http.HttpMessageHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.Configuration.NoopHttpConfigurator.CreateHttpMessageHandler(System.Net.Http.HttpMessageHandler)">
            <inheritdoc/>
        </member>
        <member name="T:Squidex.ClientLibrary.Content`1">
            <summary>
            Represents a content item.
            </summary>
            <typeparam name="T">The type for the data structure.</typeparam>
            <seealso cref="T:Squidex.ClientLibrary.Entity" />
        </member>
        <member name="P:Squidex.ClientLibrary.Content`1.IsPending">
            <summary>
            Gets or sets a value indicating whether this content item is pending.
            </summary>
            <value>
              <c>true</c> if this content item is pending; otherwise, <c>false</c>.
            </value>
            <remarks>
            This property is not supported anymore. A content item is pending when the <see cref="P:Squidex.ClientLibrary.Content`1.NewStatus"/> property is not null.
            </remarks>
        </member>
        <member name="P:Squidex.ClientLibrary.Content`1.NewStatus">
            <summary>
            The new status when this content item has an unpublished, new version.
            </summary>
            <value>
            The new status.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.Content`1.Data">
            <summary>
            Gets the data of the content item.
            </summary>
            <value>
            The data of the content item. Cannot be replaced.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.Content`1.AppName">
            <summary>
            Gets the name of the app where this content belongs to.
            </summary>
            <value>
            The name of the app where this content belongs to.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.Content`1.SchemaName">
            <summary>
            Gets the name of the schema where this content belongs to.
            </summary>
            <value>
            The name of the app schema this content belongs to.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.Content`1.Status">
            <summary>
            Gets or sets the status of the content item.
            </summary>
            <value>
            The status of the content item.
            </value>
        </member>
        <member name="T:Squidex.ClientLibrary.ContentQuery">
            <summary>
            Represents a content query.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.ContentQuery.Ids">
            <summary>
            Gets or sets the IDs of the content items to retrieve.
            </summary>
            <value>
            The IDs of the content items to retrieve.
            </value>
            <remarks>
            If this option is provided all other properties are ignored.
            </remarks>
        </member>
        <member name="P:Squidex.ClientLibrary.ContentQuery.JsonQuery">
            <summary>
            Gets or sets the JSON query.
            </summary>
            <value>
            The JSON query.
            </value>
            <remarks>
            Do not use this property in combination with OData properties.
            </remarks>
        </member>
        <member name="P:Squidex.ClientLibrary.ContentQuery.Top">
            <summary>
            Gets or sets the OData argument to define the number of content items to retrieve (<code>$top</code>).
            </summary>
            <value>
            The the number of content items to retrieve.
            </value>
            <remarks>
            Use this property to implement pagination but not in combination with <see cref="P:Squidex.ClientLibrary.ContentQuery.JsonQuery"/> property.
            </remarks>
        </member>
        <member name="P:Squidex.ClientLibrary.ContentQuery.Skip">
            <summary>
            Gets or sets the OData argument to define number of content items to skip (<code>$skip</code>).
            </summary>
            <value>
            The the number of content items to skip.
            </value>
            <remarks>
            Use this property to implement pagination but not in combination with <see cref="P:Squidex.ClientLibrary.ContentQuery.JsonQuery"/> property.
            </remarks>
        </member>
        <member name="P:Squidex.ClientLibrary.ContentQuery.OrderBy">
            <summary>
            Gets or sets the OData order argument (<code>$orderby</code>).
            </summary>
            <value>
            The OData order argument.
            </value>
            <remarks>
            Do not use this property in combination with <see cref="P:Squidex.ClientLibrary.ContentQuery.JsonQuery"/> property.
            </remarks>
        </member>
        <member name="P:Squidex.ClientLibrary.ContentQuery.Filter">
            <summary>
            Gets or sets the OData filter argument (<code>$filter</code>).
            </summary>
            <value>
            The OData filter argument.
            </value>
            <remarks>
            Do not use this property in combination with <see cref="P:Squidex.ClientLibrary.ContentQuery.JsonQuery"/> property.
            </remarks>
        </member>
        <member name="P:Squidex.ClientLibrary.ContentQuery.Search">
            <summary>
            Gets or sets the OData argument to define number of full text search (<code>$search</code>).
            </summary>
            <value>
            The full text query.
            </value>
        </member>
        <member name="T:Squidex.ClientLibrary.ContentsClient`2">
            <summary>
            Default implementation of the <see cref="T:Squidex.ClientLibrary.IContentsClient`2"/> interface.
            </summary>
            <typeparam name="TEntity">The type for the content entity.</typeparam>
            <typeparam name="TData">The type that represents the data structure.</typeparam>
            <seealso cref="T:Squidex.ClientLibrary.Utils.SquidexClientBase" />
            <seealso cref="T:Squidex.ClientLibrary.IContentsClient`2" />
        </member>
        <member name="P:Squidex.ClientLibrary.ContentsClient`2.SchemaName">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.#ctor(Squidex.ClientLibrary.SquidexOptions,System.String,System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Squidex.ClientLibrary.ContentsClient`2"/> class
            with the name of the schema, the options from the <see cref="T:Squidex.ClientLibrary.SquidexClientManager"/> and the HTTP client.
            </summary>
            <param name="options">The options from the <see cref="T:Squidex.ClientLibrary.SquidexClientManager"/>. Cannot be null.</param>
            <param name="schemaName">Name of the schema. Cannot be null or empty.</param>
            <param name="httpClient">The HTTP client. Cannot be null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="schemaName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="httpClient"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="schemaName"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.GetAllAsync(System.Int32,System.Func{`0,System.Threading.Tasks.Task},Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.GetAllAsync(System.Func{`0,System.Threading.Tasks.Task},System.Int32,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.GraphQlAsync``1(System.Collections.Generic.IEnumerable{System.Object},Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.GraphQlGetAsync``1(System.Object,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.GraphQlAsync``1(System.Object,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.GetAsync(System.Collections.Generic.HashSet{System.String},Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.GetAsync(Squidex.ClientLibrary.ContentQuery,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.GetAsync(System.String,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.GetReferencingAsync(`0,Squidex.ClientLibrary.ContentQuery,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.GetReferencingAsync(System.String,Squidex.ClientLibrary.ContentQuery,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.GetReferencesAsync(`0,Squidex.ClientLibrary.ContentQuery,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.GetReferencesAsync(System.String,Squidex.ClientLibrary.ContentQuery,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.CreateAsync(`1,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.CreateAsync(`1,System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.CreateDraftAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.CreateDraftAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.DeleteDraftAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.DeleteDraftAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.UpsertAsync(System.String,`1,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.UpsertAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.UpdateAsync(System.String,`1,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.UpdateAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.BulkUpdateAsync(Squidex.ClientLibrary.BulkUpdate,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.PatchAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.PatchAsync``1(`0,``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.ChangeStatusAsync(System.String,Squidex.ClientLibrary.ChangeStatus,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.ChangeStatusAsync(`0,Squidex.ClientLibrary.ChangeStatus,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.ChangeStatusAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.ChangeStatusAsync(`0,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.DeleteAsync(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ContentsClient`2.DeleteAsync(`0,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Squidex.ClientLibrary.ContentsResult`2">
            <summary>
            The result set of contents.
            </summary>
            <typeparam name="TEntity">The type for the content entity.</typeparam>
            <typeparam name="TData">The type that represents the data structure.</typeparam>
            <seealso cref="T:Squidex.ClientLibrary.Resource" />
        </member>
        <member name="P:Squidex.ClientLibrary.ContentsResult`2.Items">
            <summary>
            Gets the content items.
            </summary>
            <value>
            The content items.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.ContentsResult`2.Total">
            <summary>
            Gets or sets the total number of content items in the App.
            </summary>
            <value>
            The total number of content items in the App.
            </value>
        </member>
        <member name="T:Squidex.ClientLibrary.CreateExtendableRuleDto">
            <summary>
            A HTTP request to create a rule.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.CreateExtendableRuleDto.Name">
            <summary>
            Gets or sets the optional name of the rule.
            </summary>
            <value>
            The optional name of the rule..
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.CreateExtendableRuleDto.Trigger">
            <summary>
            Gets or sets the rule trigger.
            </summary>
            <value>
            The rule trigger.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.CreateExtendableRuleDto.Action">
            <summary>
            Gets or sets the rule action.
            </summary>
            <value>
            The rule action.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.CreateExtendableRuleDto.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this rule is enabled.
            </summary>
            <value>
              <c>true</c> if this rule is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Squidex.ClientLibrary.DynamicContent">
            <summary>
            A content with a dynamic data structure.
            </summary>
            <seealso cref="T:Squidex.ClientLibrary.Content`1" />
            <remarks>
            Use this type when you have a dynamic structure for your content or if you query content items across many schemas.
            </remarks>
        </member>
        <member name="T:Squidex.ClientLibrary.DynamicData">
            <summary>
            A dynamic data object.
            </summary>
            <remarks>
            Use this type when you have a dynamic structure for your content or if you query content items across many schemas.
            </remarks>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEvent">
            <summary>
            Event on an asset.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEvent.Type">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEvent.Id">
            <summary>
            Asset's id.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEvent.Created">
            <summary>
            When the asset has been created.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEvent.LastModified">
            <summary>
            When the asset has been modified.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEvent.CreatedBy">
            <summary>
            Who has created the asset.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEvent.LastModifiedBy">
            <summary>
            Who has modified the asset.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEvent.MimeType">
            <summary>
            Mime type of the asset.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEvent.FileName">
            <summary>
            File name of the asset.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEvent.FileVersion">
            <summary>
            Version of the asset.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEvent.FileSize">
            <summary>
            Size of the asset.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEvent.PixelWidth">
            <summary>
            Width in pixel if the asset is an image.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEvent.PixelHeight">
            <summary>
            Height in pixel if the asset is an image.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEvent.AssetType">
            <summary>
            Type of the asset.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEvent.IsImage">
            <summary>
            Is an image.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEventType">
            <summary>
            Type of events on an asset.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEventType.Created">
            <summary>
            Asset Created.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEventType.Deleted">
            <summary>
            Asset Deleted.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEventType.Annotated">
            <summary>
            Asset Annotated.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.EnrichedEvents.EnrichedAssetEventType.Updated">
            <summary>
            Asset Updated.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.EnrichedCommentEvent">
            <summary>
            Event generated from a comment.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedCommentEvent.Text">
            <summary>
            Comment's text.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedCommentEvent.Url">
            <summary>
            Url of the content commented.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEvent`1">
            <inheritdoc />
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEvent`1.Data">
            <summary>
            Data payload (updated).
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEvent`1.DataOld">
            <summary>
            Data payload (previous).
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEvent">
            <summary>
            Event on a content.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEvent.Type">
            <summary>
            Content event type.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEvent.Id">
            <summary>
            Content id.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEvent.Created">
            <summary>
            When the content has been created.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEvent.LastModified">
            <summary>
            When the content has been modified.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEvent.CreatedBy">
            <summary>
            Who has created the content.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEvent.LastModifiedBy">
            <summary>
            Who has modified the content.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEvent.Data">
            <summary>
            Data payload (updated).
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEvent.DataOld">
            <summary>
            Data payload (previous).
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEvent.Status">
            <summary>
            Status of the content.
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEvent.ToTyped``1">
            <summary>
            Get a instance of EnrichedContentEvent where Data and DataOld have type T.
            </summary>
            <typeparam name="T">Type of Data and DataOld properties.</typeparam>
            <returns>EnrichedContentEvent instance where Data and DataOld have type T.</returns>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEventType">
            <summary>
            Type of event on a content.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEventType.Created">
            <summary>
            Content Created.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEventType.Deleted">
            <summary>
            Content Deleted.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEventType.Published">
            <summary>
            Content Published.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEventType.StatusChanged">
            <summary>
            Content Status Changed.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEventType.Updated">
            <summary>
            Content Updated.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.EnrichedEvents.EnrichedContentEventType.Unpublished">
            <summary>
            Content Unpublished.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.EnrichedEvent">
            <summary>
            Abstract class for the events sent by the rules.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedEvent.App">
            <summary>
            Application that generated the event.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedEvent.Timestamp">
            <summary>
            When the event has been generated.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedEvent.Name">
            <summary>
            Name of the event.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedEvent.Version">
            <summary>
            Version of the object.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.EnrichedEventEnvelope">
            <summary>
            Envelope which contains the generated events.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedEventEnvelope.Type">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedEventEnvelope.Timestamp">
            <summary>
            When the event has been generated.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedEventEnvelope.Payload">
            <summary>
            The payload of the evnet.
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.EnrichedEvents.EnrichedEventEnvelope.DeserializeEnvelope(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Utils to deserialize an Envelope.
            It uses TypeNameHandling = TypeNameHandling.Objects and SerializationBinder = new EnrichedEventSerializationBinder().
            </summary>
            <param name="json">The string to be deserialized.</param>
            <param name="settings">Custom JsonSerializerSettings settings. TypeNameHandling and SerializationBinder will be overwritten.</param>
            <returns>
            The enriched event.
            </returns>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.EnrichedEventSerializationBinder">
            <summary>
            Binder to deserialize the EnrichedEventEnvelope with the right payload using the $type on the json tree.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedEventSerializationBinder.EnrichedEventTypes">
            <summary>
            List of available event classes.
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.EnrichedEvents.EnrichedEventSerializationBinder.BindToType(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.EnrichedEvents.EnrichedEventSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.EnrichedManualEvent">
            <summary>
            Event triggered manually.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.EnrichedSchemaEvent">
            <summary>
            Event on a schema.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedSchemaEvent.Type">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedSchemaEvent.Id">
            <summary>
            Schema id.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.EnrichedSchemaEventBase">
            <summary>
            Abstract class for events on a schema.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedSchemaEventBase.Schema">
            <summary>
            Schema changed.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.EnrichedSchemaEventType">
            <summary>
            Schema event types.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.EnrichedEvents.EnrichedSchemaEventType.Created">
            <summary>
            Schema created.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.EnrichedEvents.EnrichedSchemaEventType.Deleted">
            <summary>
            Schema Deleted.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.EnrichedEvents.EnrichedSchemaEventType.Published">
            <summary>
            Schema Published.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.EnrichedEvents.EnrichedSchemaEventType.Unpublished">
            <summary>
            Schema Unpublished.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.EnrichedEvents.EnrichedSchemaEventType.Updated">
            <summary>
            Schema updated.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.EnrichedUsageExceededEvent">
            <summary>
            Usage Exceeded Event.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedUsageExceededEvent.CallsCurrent">
            <summary>
            Current calls.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedUsageExceededEvent.CallsLimit">
            <summary>
            Calls limit.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.EnrichedUserEventBase">
            <summary>
            Avstract class for events triggered by an Actor.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.EnrichedUserEventBase.Actor">
            <summary>
            Actor who has triggered the event.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.EnrichedEvents.IEnrichedEntityEvent">
            <summary>
            Interface IEnrichedEntityEvent.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.EnrichedEvents.IEnrichedEntityEvent.Id">
            <summary>
            Id.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.Entity">
            <summary>
            Base class for all entities.
            </summary>
            <seealso cref="T:Squidex.ClientLibrary.Resource" />
        </member>
        <member name="P:Squidex.ClientLibrary.Entity.Id">
            <summary>
            Gets or sets the ID of the entity.
            </summary>
            <value>
            The ID of the content.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.Entity.CreatedBy">
            <summary>
            The ID of the user or client who created this item.
            </summary>
            <value>
            The ID of the user or client.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.Entity.LastModifiedBy">
            <summary>
            The ID of the user or client modified the content the last time.
            </summary>
            <value>
            The ID of the user or client.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.Entity.Created">
            <summary>
            Gets or sets the timestamp when the content has been created.
            </summary>
            <value>
            The timestamp.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.Entity.LastModified">
            <summary>
            Gets or sets the timestamp when the content has been modified the last time.
            </summary>
            <value>
            The timestamp.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.Entity.Version">
            <summary>
            Gets or sets the version of the entity.
            </summary>
            <value>
            The version as integer. Zero for just created items.
            </value>
        </member>
        <member name="T:Squidex.ClientLibrary.ExtendableRuleDto">
            <summary>
            Defines the rule.
            </summary>
            <seealso cref="T:Squidex.ClientLibrary.Entity" />
        </member>
        <member name="P:Squidex.ClientLibrary.ExtendableRuleDto.Name">
            <summary>
            Gets or sets the optional name of the rule.
            </summary>
            <value>
            The optional name of the rule.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.ExtendableRuleDto.Trigger">
            <summary>
            Gets or sets the rule trigger.
            </summary>
            <value>
            The rule trigger.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.ExtendableRuleDto.Action">
            <summary>
            Gets or sets the rule action as dynamic object.
            </summary>
            <value>
            The rule action as dynamic object..
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.ExtendableRuleDto.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this rule is enabled.
            </summary>
            <value>
              <c>true</c> if this rule is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Squidex.ClientLibrary.ExtendableRules">
            <summary>
            The result set of rules.
            </summary>
            <seealso cref="T:Squidex.ClientLibrary.Resource" />
        </member>
        <member name="P:Squidex.ClientLibrary.ExtendableRules.Items">
            <summary>
            Gets or sets the rules.
            </summary>
            <value>
            The rules.
            </value>
        </member>
        <member name="T:Squidex.ClientLibrary.ExtendableRulesClient">
            <summary>
            The default implementation of the <see cref="T:Squidex.ClientLibrary.IExtendableRulesClient"/> interface.
            </summary>
            <seealso cref="T:Squidex.ClientLibrary.Utils.SquidexClientBase" />
            <seealso cref="T:Squidex.ClientLibrary.IExtendableRulesClient" />
        </member>
        <member name="M:Squidex.ClientLibrary.ExtendableRulesClient.#ctor(Squidex.ClientLibrary.SquidexOptions,System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Squidex.ClientLibrary.ExtendableRulesClient"/> class
            with the name of the schema, the options from the <see cref="T:Squidex.ClientLibrary.SquidexClientManager"/> and the HTTP client.
            </summary>
            <param name="options">The options from the <see cref="T:Squidex.ClientLibrary.SquidexClientManager"/>. Cannot be null.</param>
            <param name="httpClient">The HTTP client. Cannot be null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="httpClient"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.ExtendableRulesClient.GetRulesAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ExtendableRulesClient.CreateRuleAsync(Squidex.ClientLibrary.CreateExtendableRuleDto,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ExtendableRulesClient.UpdateRuleAsync(System.String,Squidex.ClientLibrary.UpdateExtendableRuleDto,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ExtendableRulesClient.EnableRuleAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ExtendableRulesClient.DisableRuleAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.ExtendableRulesClient.DeleteRuleAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Squidex.ClientLibrary.GraphQlError">
            <summary>
            Represents a GraphQL error.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.GraphQlError.Message">
            <summary>
            Gets or sets the GraphQL error message.
            </summary>
            <value>
            The GraphQL error message.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.GraphQlError.Path">
            <summary>
            The path to the failed resolver.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.GraphQlError.Locations">
            <summary>
            The error locations.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.GraphQLErrorLocation">
            <summary>
            The error location within the query.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.GraphQLErrorLocation.Column">
            <summary>
            The column in the query.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.GraphQLErrorLocation.Row">
            <summary>
            The row in the query.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.GraphQlResponse`1">
            <summary>
            A graphql response.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
        </member>
        <member name="P:Squidex.ClientLibrary.GraphQlResponse`1.Data">
            <summary>
            The data object. Can be null when no result is returned on an error occurred.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.GraphQlResponse`1.Errors">
            <summary>
            The errors. Can be null when valid.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.IAuthenticator">
            <summary>
            Handles authentication tokens.
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.IAuthenticator.GetBearerTokenAsync">
            <summary>
            Gets the JWT bearer token.
            </summary>
            <returns>
            The JWT bearer token.
            </returns>
        </member>
        <member name="M:Squidex.ClientLibrary.IAuthenticator.RemoveTokenAsync(System.String)">
            <summary>
            Removes a token when it has been expired or invalidated.
            </summary>
            <param name="token">The token to remove.</param>
            <returns>
            The task for completion.
            </returns>
        </member>
        <member name="T:Squidex.ClientLibrary.IContentsClient`2">
            <summary>
            A client to query and manage content items.
            </summary>
            <typeparam name="TEntity">The type for the content entity.</typeparam>
            <typeparam name="TData">The type that represents the data structure.</typeparam>
        </member>
        <member name="P:Squidex.ClientLibrary.IContentsClient`2.SchemaName">
            <summary>
            Gets the name of the schema for which this client has been created.
            </summary>
            <value>
            The name of the schema for which this client has been created.
            </value>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.CreateAsync(`1,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a new content item from a data object.
            </summary>
            <param name="data">The data.</param>
            <param name="publish">if set to <c>true</c> the content will be published.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The created content item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.CreateAsync(`1,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a new content item from a data object with a custom ID.
            </summary>
            <param name="data">The data.</param>
            <param name="id">The optional custom ID for the content item.</param>
            <param name="publish">if set to <c>true</c> the content will be published.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The created content item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.CreateDraftAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new draft version for the content item with the specified ID.
            </summary>
            <param name="id">The ID of the content item. Cannot be null or empty.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The updated content item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.CreateDraftAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new draft version for the specified content item.
            </summary>
            <param name="entity">The content item.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The updated content item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.ChangeStatusAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the status of the content item with the specified ID.
            </summary>
            <param name="id">The ID of the content item to change. Cannot be null or empty.</param>
            <param name="status">The new status of the content item.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The updated content item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="status"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="status"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.ChangeStatusAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the status of the specified content item.
            </summary>
            <param name="entity">The content item to change.</param>
            <param name="status">The new status of the content item.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The updated content item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="status"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="status"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.ChangeStatusAsync(System.String,Squidex.ClientLibrary.ChangeStatus,System.Threading.CancellationToken)">
            <summary>
            Change the status of the content item with the specified ID.
            </summary>
            <param name="id">The ID of the content item to change. Cannot be null or empty.</param>
            <param name="request">The status request.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The updated content item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="request"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.ChangeStatusAsync(`0,Squidex.ClientLibrary.ChangeStatus,System.Threading.CancellationToken)">
            <summary>
            Change the status of the specified content item.
            </summary>
            <param name="entity">The content item to change.</param>
            <param name="request">The status request.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The updated content item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="request"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.PatchAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Patch the data of the content item with the specified ID.
            </summary>
            <typeparam name="TPatch">The partial data to update.</typeparam>
            <param name="id">The ID of the content item to patch. Cannot be null or empty.</param>
            <param name="patch">The partial data.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The updated content item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="patch"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.PatchAsync``1(`0,``0,System.Threading.CancellationToken)">
            <summary>
            Patch the data of the specified content item.
            </summary>
            <typeparam name="TPatch">The partial data to update.</typeparam>
            <param name="entity">The content item to patch.</param>
            <param name="patch">The partial data.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The updated content item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="patch"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.UpsertAsync(System.String,`1,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates or creates the content item with the specified ID.
            </summary>
            <param name="id">The ID of the content item to update or create. Cannot be null or empty.</param>
            <param name="data">The full data.</param>
            <param name="publish">if set to <c>true</c> the content will be published.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The updated or created content item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.UpsertAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Updates or creates the specified content item.
            </summary>
            <param name="entity">The content item to update or create.</param>
            <param name="publish">if set to <c>true</c> the content will be published.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The updated or created content item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.UpdateAsync(System.String,`1,System.Threading.CancellationToken)">
            <summary>
            Updates the content item with the specified ID.
            </summary>
            <param name="id">The ID of the content item to update. Cannot be null or empty.</param>
            <param name="data">The full data.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The updated content item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates the specified content item.
            </summary>
            <param name="entity">The content item to update.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The updated content item.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.DeleteAsync(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes the content item with the specified ID.
            </summary>
            <param name="id">The ID of the content item to delete. Cannot be null or empty.</param>
            <param name="permanent">True to delete the content permanently.</param>
            <param name="checkReferrers">True to check for referrers.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The task for completion.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.DeleteAsync(`0,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified content item.
            </summary>
            <param name="entity">The content item to delete.</param>
            <param name="permanent">True to delete the content permanently.</param>
            <param name="checkReferrers">True to check for referrers.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The task for completion.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.DeleteDraftAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the draft version of the content item with the specified ID.
            </summary>
            <param name="id">The ID of the content item to update. Cannot be null or empty.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The task for completion.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.DeleteDraftAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Deletes the draft version of the specified content item.
            </summary>
            <param name="entity">The content item to update.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The task for completion.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.BulkUpdateAsync(Squidex.ClientLibrary.BulkUpdate,System.Threading.CancellationToken)">
            <summary>
            Executes a bulk update.
            </summary>
            <param name="update">The bulk update.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The result of the bulk update.
            </returns>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.GetAllAsync(System.Int32,System.Func{`0,System.Threading.Tasks.Task},Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <summary>
            Gets all content items in batches.
            </summary>
            <param name="batchSize">Size of each batch.</param>
            <param name="callback">The callbac that is invoked for each content item..</param>
            <param name="context">The context object to add additonal headers to the request and change the behavior of the API when querying content items.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The task for completion.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="callback"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.GetAllAsync(System.Func{`0,System.Threading.Tasks.Task},System.Int32,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <summary>
            Gets all content items in batches.
            </summary>
            <param name="callback">The callbac that is invoked for each content item..</param>
            <param name="batchSize">Size of each batch.</param>
            <param name="context">The context object to add additonal headers to the request and change the behavior of the API when querying content items.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The task for completion.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="callback"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.GetAsync(System.String,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <summary>
            Gets a content item by ID.
            </summary>
            <param name="id">The ID of the content item. Cannot be null or empty.</param>
            <param name="context">The context object to add additonal headers to the request and change the behavior of the API when querying content items.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The content item or null if not found.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.GetAsync(Squidex.ClientLibrary.ContentQuery,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <summary>
            Query content items by an optional query.
            </summary>
            <param name="query">The optional query.</param>
            <param name="context">The context object to add additonal headers to the request and change the behavior of the API when querying content items.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The matching content items.
            </returns>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.GetReferencingAsync(System.String,Squidex.ClientLibrary.ContentQuery,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <summary>
            Query all contents items that reference the content item with the specified ID.
            </summary>
            <param name="id">The ID of the content item. Cannot be null or empty.</param>
            <param name="query">The optional query.</param>
            <param name="context">The context object to add additonal headers to the request and change the behavior of the API when querying content items.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The matching content items.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.GetReferencingAsync(`0,Squidex.ClientLibrary.ContentQuery,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <summary>
            Query all contents items that reference the specified content item.
            </summary>
            <param name="entity">The content item. Cannot be null.</param>
            <param name="query">The optional query.</param>
            <param name="context">The context object to add additonal headers to the request and change the behavior of the API when querying content items.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The matching content items.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.GetReferencesAsync(System.String,Squidex.ClientLibrary.ContentQuery,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <summary>
            Query all references of the content item with the specified ID.
            </summary>
            <param name="id">The ID of the content item. Cannot be null or empty.</param>
            <param name="query">The optional query.</param>
            <param name="context">The context object to add additonal headers to the request and change the behavior of the API when querying content items.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The matching content items.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.GetReferencesAsync(`0,Squidex.ClientLibrary.ContentQuery,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <summary>
            Query all references of the specified content item.
            </summary>
            <param name="entity">The content item. Cannot be null.</param>
            <param name="query">The optional query.</param>
            <param name="context">The context object to add additonal headers to the request and change the behavior of the API when querying content items.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The matching content items.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.GetAsync(System.Collections.Generic.HashSet{System.String},Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <summary>
            Gets content items by ids across all schemas.
            </summary>
            <param name="ids">The ids to query.</param>
            <param name="context">The context object to add additonal headers to the request and
            change the behavior of the API when querying content items.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The matching content items.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ids"/> is null.</exception>
            <remarks>
            Even though this method is part of the content client that is created for a specific schemas, it can return content items
            across all schemas in your App.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.GraphQlAsync``1(System.Object,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <summary>
            Executes a GrapQL query as HTTP POST method.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="request">The GraphQL request. Cannot be null.</param>
            <param name="context">The context object to add additonal headers to the request and
            change the behavior of the API when querying content items.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The result of the query.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="request"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.GraphQlAsync``1(System.Collections.Generic.IEnumerable{System.Object},Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <summary>
            Executes multiple GrapQL queries as HTTP POST method.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="requests">The GraphQL requests. Cannot be null.</param>
            <param name="context">The context object to add additonal headers to the request and
            change the behavior of the API when querying content items.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The result of the query.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="requests"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IContentsClient`2.GraphQlGetAsync``1(System.Object,Squidex.ClientLibrary.QueryContext,System.Threading.CancellationToken)">
            <summary>
            Executes a GrapQL query as HTTP GET method.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="request">The GraphQL request. Cannot be null.</param>
            <param name="context">The context object to add additonal headers to the request and
            change the behavior of the API when querying content items.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The result of the query.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="request"/> is null.</exception>
        </member>
        <member name="T:Squidex.ClientLibrary.IExtendableRulesClient">
            <summary>
            A custom rule client that uses dynamic structures for rule actions.
            </summary>
            <remarks>
            The API and this client library provide concrete types for rule actions.
            This client library is useful when you connect to a Squidex installation with custom actions that are not known.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.IExtendableRulesClient.GetRulesAsync(System.Threading.CancellationToken)">
            <summary>
            Query all rules.
            </summary>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The rules.
            </returns>
        </member>
        <member name="M:Squidex.ClientLibrary.IExtendableRulesClient.CreateRuleAsync(Squidex.ClientLibrary.CreateExtendableRuleDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new rule.
            </summary>
            <param name="request">The request to create the rule. Cannot be null.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The created rule.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="request"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IExtendableRulesClient.UpdateRuleAsync(System.String,Squidex.ClientLibrary.UpdateExtendableRuleDto,System.Threading.CancellationToken)">
            <summary>
            Updates the rule with the specified ID.
            </summary>
            <param name="id">The ID of the rule to update. Cannot be null or empty.</param>
            <param name="request">The update request. Cannot be null or empty.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The update rule.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="request"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IExtendableRulesClient.EnableRuleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Enables the rule with the specified ID.
            </summary>
            <param name="id">The ID of the rule to enable. Cannot be null or empty.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The enabled rule.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IExtendableRulesClient.DisableRuleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Disables the rule with the specified ID.
            </summary>
            <param name="id">The ID of the rule to disable. Cannot be null or empty.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The disabled rule.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.IExtendableRulesClient.DeleteRuleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the rule with the specified ID.
            </summary>
            <param name="id">The ID of the rule to delete. Cannot be null or empty.</param>
            <param name="ct">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            The task for completion.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty.</exception>
        </member>
        <member name="T:Squidex.ClientLibrary.InvariantConverter">
            <summary>
            A custom JSON converter for invariant fields to convert nested invariant values to flat values.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Squidex.ClientLibrary.InvariantConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.InvariantConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.InvariantConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Squidex.ClientLibrary.InvariantWriteConverter">
            <summary>
            A custom JSON converter for invariant fields to convert nested invariant values to flat values
            when serializing objects to JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Squidex.ClientLibrary.InvariantWriteConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.InvariantWriteConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.InvariantWriteConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Squidex.ClientLibrary.ISquidexClientManager">
            <summary>
            Provides access to all endpoints through individual clients and handles authentication.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.ISquidexClientManager.Options">
            <summary>
            Gets the options that are used to initialize the client manager.
            </summary>
            <value>
            The options that are used to initialize the client manager.
            </value>
            <remarks>
            This object is frozen and cannot be changed later.
            </remarks>
        </member>
        <member name="P:Squidex.ClientLibrary.ISquidexClientManager.App">
            <summary>
            Gets the name of the App.
            </summary>
            <value>
            The name of the App.
            </value>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.GenerateImageUrl(System.String)">
            <summary>
            Generates the URL to the image with the specified ID.
            </summary>
            <param name="id">The ID of the asset.</param>
            <returns>
            THe URL to the image.
            </returns>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.GenerateImageUrl(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates the URL to the image with the first specified ID.
            </summary>
            <param name="id">The ID of the asset.</param>
            <returns>
            THe URL to the image.
            </returns>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreateAppsClient">
            <summary>
            Creates a client instance to query and manage app configuration.
            </summary>
            <returns>
            The created client.
            </returns>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreateAssetsClient">
            <summary>
            Creates a client instance to query and manage assets.
            </summary>
            <returns>
            The created client.
            </returns>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreateBackupsClient">
            <summary>
            Creates a client instance to query and manage backups.
            </summary>
            <returns>
            The created client.
            </returns>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreateCommentsClient">
            <summary>
            Creates a client instance to query and manage comments.
            </summary>
            <returns>
            The created client.
            </returns>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreateHistoryClient">
            <summary>
            Creates a client instance to query and manage histories.
            </summary>
            <returns>
            The created client.
            </returns>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreateLanguagesClient">
            <summary>
            Creates a client instance to query all supported languages.
            </summary>
            <returns>
            The created client.
            </returns>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreatePingClient">
            <summary>
            Creates a client instance to ping the server for monitoring.
            </summary>
            <returns>
            The created client.
            </returns>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreatePlansClient">
            <summary>
            Creates a client instance to query and manage plans and subscriptions.
            </summary>
            <returns>
            The created client.
            </returns>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreateRulesClient">
            <summary>
            Creates a client instance to query and manage rules.
            </summary>
            <returns>
            The created client.
            </returns>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreateSchemasClient">
            <summary>
            Creates a client instance to query and manage schemas.
            </summary>
            <returns>
            The created client.
            </returns>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreateStatisticsClient">
            <summary>
            Creates a client instance to query statistics.
            </summary>
            <returns>
            The created client.
            </returns>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreateUsersClient">
            <summary>
            Creates a client instance to query user information.
            </summary>
            <returns>
            The created client.
            </returns>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreateExtendableRulesClient">
            <summary>
            Creates a client instance to query and manage untyped rules.
            </summary>
            <returns>
            The created client.
            </returns>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreateContentsClient``2(System.String)">
            <summary>
            Creates a client instance to query and manage contents for a schema.
            </summary>
            <typeparam name="TEntity">The type for the content entity.</typeparam>
            <typeparam name="TData">The type that represents the data structure.</typeparam>
            <param name="schemaName">The name of the schema. Cannot be null.</param>
            <returns>
            The created client.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="schemaName"/> is null.</exception>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreateDynamicContentsClient(System.String)">
            <summary>
            Creates a client instance to query and manage contents for a schema with dynamic data shape.
            </summary>
            <param name="schemaName">The name of the schema. Cannot be null.</param>
            <returns>
            The created client.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="schemaName"/> is null.</exception>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="M:Squidex.ClientLibrary.ISquidexClientManager.CreateHttpClient">
            <summary>
            Creates a <see cref="T:System.Net.Http.HttpClient"/> to make all kind of authorized requests.
            </summary>
            <returns>
            The created client.
            </returns>
            <remarks>
            Do not create new clients frequently.
            </remarks>
        </member>
        <member name="T:Squidex.ClientLibrary.KeepCasingAttribute">
            <summary>
            Annote your data object to keep the casing and to not convert it to camel case.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Squidex.ClientLibrary.KeepCasingAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squidex.ClientLibrary.KeepCasingAttribute"/> class.
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ErrorDto.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ErrorDto.Message">
            <summary>Error message.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ErrorDto.ErrorCode">
            <summary>The error code.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ErrorDto.TraceId">
            <summary>The optional trace id.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ErrorDto.Type">
            <summary>Link to the error details.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ErrorDto.Details">
            <summary>Detailed error messages.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ErrorDto.StatusCode">
            <summary>Status code of the http response.</summary>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SquidexManagementException`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Squidex.ClientLibrary.Management.AssetQuery">
            <summary>
            Represents an asset query.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetQuery.Ids">
            <summary>
            Gets or sets the IDs of the assets to retrieve.
            </summary>
            <value>
            The IDs of the assets to retrieve.
            </value>
            <remarks>
            If this option is provided all other properties are ignored.
            </remarks>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetQuery.Query">
            <summary>
            Gets or sets the JSON query.
            </summary>
            <value>
            The JSON query.
            </value>
            <remarks>
            Do not use this property in combination with OData properties.
            </remarks>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetQuery.Top">
            <summary>
            Gets or sets the OData argument to define the number of assets to retrieve (<code>$top</code>).
            </summary>
            <value>
            The the number of assets to retrieve.
            </value>
            <remarks>
            Use this property to implement pagination but not in combination with <see cref="P:Squidex.ClientLibrary.Management.AssetQuery.Query"/> property.
            </remarks>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetQuery.Skip">
            <summary>
            Gets or sets the OData argument to define number of assets to skip (<code>$skip</code>).
            </summary>
            <value>
            The the number of assets to skip.
            </value>
            <remarks>
            Use this property to implement pagination but not in combination with <see cref="P:Squidex.ClientLibrary.Management.AssetQuery.Query"/> property.
            </remarks>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetQuery.OrderBy">
            <summary>
            Gets or sets the OData order argument (<code>$orderby</code>).
            </summary>
            <value>
            The OData order argument.
            </value>
            <remarks>
            Do not use this property in combination with <see cref="P:Squidex.ClientLibrary.Management.AssetQuery.Query"/> property.
            </remarks>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetQuery.Filter">
            <summary>
            Gets or sets the OData filter argument (<code>$filter</code>).
            </summary>
            <value>
            The OData filter argument.
            </value>
            <remarks>
            Do not use this property in combination with <see cref="P:Squidex.ClientLibrary.Management.AssetQuery.Query"/> property.
            </remarks>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetQuery.ParentId">
            <summary>
            Gets or sets the optional folder ID.
            </summary>
            <value>
            The parent optional folder ID.
            </value>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.PostAssetAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.IO.FileInfo,System.Threading.CancellationToken)">
            <summary>
            Upload a new asset.
            </summary>
            <param name="app">The name of the app.</param>
            <param name="parentId">The optional parent folder id.</param>
            <param name="id">The optional custom asset id.</param>
            <param name="duplicate">True to duplicate the asset, event if the file has been uploaded.</param>
            <param name="file">The file to upload.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            Asset created.
            </returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.PutAssetContentAsync(System.String,System.String,System.IO.FileInfo,System.Threading.CancellationToken)">
            <summary>
            Replace asset content.
            </summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset.</param>
            <param name="file">The file to upload.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            Asset updated.
            </returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.GetAssetsAsync(System.String,Squidex.ClientLibrary.Management.AssetQuery,System.Threading.CancellationToken)">
            <summary>Get assets.</summary>
            <param name="app">The name of the app.</param>
            <param name="query">The optional asset query.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Assets returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.GetAllAsync(System.String,System.Func{Squidex.ClientLibrary.Management.AssetDto,System.Threading.Tasks.Task},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get assets.
            </summary>
            <param name="app">The name of the app.</param>
            <param name="callback">The callback that is invoke for each asset.</param>
            <param name="batchSize">The number of assets per request.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            Assets returned.
            </returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.GetAllByQueryAsync(System.String,System.Func{Squidex.ClientLibrary.Management.AssetDto,System.Threading.Tasks.Task},Squidex.ClientLibrary.Management.AssetQuery,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get assets.
            </summary>
            <param name="app">The name of the app.</param>
            <param name="callback">The callback that is invoke for each asset.</param>
            <param name="query">The optional asset query.</param>
            <param name="batchSize">The number of assets per request.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            Assets returned.
            </returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.GetAssetContentBySlugAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{Squidex.ClientLibrary.Management.ResizeMode},System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Squidex.ClientLibrary.Management.ImageFormat},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get the asset content.</summary>
            <param name="app">The name of the app.</param>
            <param name="idOrSlug">The id or slug of the asset.</param>
            <param name="more">Optional suffix that can be used to seo-optimize the link to the image Has not effect.</param>
            <param name="version">The optional version of the asset.</param>
            <param name="cache">The cache duration in seconds.</param>
            <param name="download">Set it to 0 to prevent download.</param>
            <param name="width">The target width of the asset, if it is an image.</param>
            <param name="height">The target height of the asset, if it is an image.</param>
            <param name="quality">Optional image quality, it is is an jpeg image.</param>
            <param name="mode">The resize mode when the width and height is defined.</param>
            <param name="bg">Optional background color.</param>
            <param name="focusX">Override the y focus point.</param>
            <param name="focusY">Override the x focus point.</param>
            <param name="nofocus">True to ignore the asset focus point if any.</param>
            <param name="keepformat">True to not use JPEG encoding when quality is set and the image is not a JPEG. Default: false.</param>
            <param name="force">True to force a new resize even if it already stored.</param>
            <param name="format">True to force a new resize even if it already stored.</param>
            <returns>Asset found and content or (resized) image returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.GetAssetContentAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{Squidex.ClientLibrary.Management.ResizeMode},System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Squidex.ClientLibrary.Management.ImageFormat},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get the asset content.</summary>
            <param name="id">The id of the asset.</param>
            <param name="version">The optional version of the asset.</param>
            <param name="cache">The cache duration in seconds.</param>
            <param name="download">Set it to 0 to prevent download.</param>
            <param name="width">The target width of the asset, if it is an image.</param>
            <param name="height">The target height of the asset, if it is an image.</param>
            <param name="quality">Optional image quality, it is is an jpeg image.</param>
            <param name="mode">The resize mode when the width and height is defined.</param>
            <param name="bg">Optional background color.</param>
            <param name="focusX">Override the y focus point.</param>
            <param name="focusY">Override the x focus point.</param>
            <param name="nofocus">True to ignore the asset focus point if any.</param>
            <param name="keepformat">True to not use JPEG encoding when quality is set and the image is not a JPEG. Default: false.</param>
            <param name="force">True to force a new resize even if it already stored.</param>
            <param name="format">True to force a new resize even if it already stored.</param>
            <returns>Asset found and content or (resized) image returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.GetAssetFoldersAsync(System.String,System.String,System.Nullable{Squidex.ClientLibrary.Management.AssetFolderScope},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get asset folders.</summary>
            <param name="app">The name of the app.</param>
            <param name="parentId">The optional parent folder id.</param>
            <param name="scope">The scope of the query.</param>
            <returns>Asset folders returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.PostAssetFolderAsync(System.String,Squidex.ClientLibrary.Management.CreateAssetFolderDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create an asset folder.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">The asset folder object that needs to be added to the App.</param>
            <returns>Asset folder created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.PutAssetFolderAsync(System.String,System.String,Squidex.ClientLibrary.Management.RenameAssetFolderDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update an asset folder.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset folder.</param>
            <param name="request">The asset folder object that needs to updated.</param>
            <returns>Asset folder updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.DeleteAssetFolderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete an asset folder.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset folder to delete.</param>
            <returns>Asset folder deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.PutAssetFolderParentAsync(System.String,System.String,Squidex.ClientLibrary.Management.MoveAssetFolderDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Move an asset folder.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset folder.</param>
            <param name="request">The asset folder object that needs to updated.</param>
            <returns>Asset folder moved.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.GetTagsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get assets tags.</summary>
            <param name="app">The name of the app.</param>
            <returns>Assets returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.GetAssetsAsync(System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get assets.</summary>
            <param name="app">The name of the app.</param>
            <param name="top">Optional number of contents to take.</param>
            <param name="skip">Optional number of contents to skip.</param>
            <param name="orderby">Optional OData order definition.</param>
            <param name="filter">Optional OData filter.</param>
            <param name="parentId">The optional parent folder id.</param>
            <param name="ids">The optional asset ids.</param>
            <param name="q">The optional json query.</param>
            <returns>Assets returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.PostAssetAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},Squidex.ClientLibrary.Management.FileParameter,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Upload a new asset.</summary>
            <param name="app">The name of the app.</param>
            <param name="parentId">The optional parent folder id.</param>
            <param name="id">The optional custom asset id.</param>
            <param name="duplicate">True to duplicate the asset, event if the file has been uploaded.</param>
            <returns>Asset created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.GetAssetsPostAsync(System.String,Squidex.ClientLibrary.Management.QueryDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get assets.</summary>
            <param name="app">The name of the app.</param>
            <param name="query">The required query object.</param>
            <returns>Assets returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.GetAssetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get an asset by id.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset to retrieve.</param>
            <returns>Asset found.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.PostUpsertAssetAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},Squidex.ClientLibrary.Management.FileParameter,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Upsert an asset.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The optional custom asset id.</param>
            <param name="parentId">The optional parent folder id.</param>
            <param name="duplicate">True to duplicate the asset, event if the file has been uploaded.</param>
            <returns>Asset created or updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.PutAssetAsync(System.String,System.String,Squidex.ClientLibrary.Management.AnnotateAssetDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update an asset.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset.</param>
            <param name="request">The asset object that needs to updated.</param>
            <returns>Asset updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.DeleteAssetAsync(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete an asset.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset to delete.</param>
            <param name="checkReferrers">True to check referrers of this asset.</param>
            <param name="permanent">True to delete the asset permanently.</param>
            <returns>Asset deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.BulkUpdateAssetsAsync(System.String,Squidex.ClientLibrary.Management.BulkUpdateAssetsDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Bulk update assets.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">The bulk update request.</param>
            <returns>Assets created, update or delete.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.PutAssetContentAsync(System.String,System.String,Squidex.ClientLibrary.Management.FileParameter,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Replace asset content.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset.</param>
            <returns>Asset updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAssetsClient.PutAssetParentAsync(System.String,System.String,Squidex.ClientLibrary.Management.MoveAssetDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Moves the asset.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset.</param>
            <param name="request">The asset object that needs to updated.</param>
            <returns>Asset moved.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.PostAssetAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.IO.FileInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.PutAssetContentAsync(System.String,System.String,System.IO.FileInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.GetAssetsAsync(System.String,Squidex.ClientLibrary.Management.AssetQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.GetAllAsync(System.String,System.Func{Squidex.ClientLibrary.Management.AssetDto,System.Threading.Tasks.Task},System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.GetAllByQueryAsync(System.String,System.Func{Squidex.ClientLibrary.Management.AssetDto,System.Threading.Tasks.Task},Squidex.ClientLibrary.Management.AssetQuery,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.GetAssetContentBySlugAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{Squidex.ClientLibrary.Management.ResizeMode},System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Squidex.ClientLibrary.Management.ImageFormat},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get the asset content.</summary>
            <param name="app">The name of the app.</param>
            <param name="idOrSlug">The id or slug of the asset.</param>
            <param name="more">Optional suffix that can be used to seo-optimize the link to the image Has not effect.</param>
            <param name="version">The optional version of the asset.</param>
            <param name="cache">The cache duration in seconds.</param>
            <param name="download">Set it to 0 to prevent download.</param>
            <param name="width">The target width of the asset, if it is an image.</param>
            <param name="height">The target height of the asset, if it is an image.</param>
            <param name="quality">Optional image quality, it is is an jpeg image.</param>
            <param name="mode">The resize mode when the width and height is defined.</param>
            <param name="bg">Optional background color.</param>
            <param name="focusX">Override the y focus point.</param>
            <param name="focusY">Override the x focus point.</param>
            <param name="nofocus">True to ignore the asset focus point if any.</param>
            <param name="keepformat">True to not use JPEG encoding when quality is set and the image is not a JPEG. Default: false.</param>
            <param name="force">True to force a new resize even if it already stored.</param>
            <param name="format">True to force a new resize even if it already stored.</param>
            <returns>Asset found and content or (resized) image returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.GetAssetContentAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{Squidex.ClientLibrary.Management.ResizeMode},System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Squidex.ClientLibrary.Management.ImageFormat},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get the asset content.</summary>
            <param name="id">The id of the asset.</param>
            <param name="version">The optional version of the asset.</param>
            <param name="cache">The cache duration in seconds.</param>
            <param name="download">Set it to 0 to prevent download.</param>
            <param name="width">The target width of the asset, if it is an image.</param>
            <param name="height">The target height of the asset, if it is an image.</param>
            <param name="quality">Optional image quality, it is is an jpeg image.</param>
            <param name="mode">The resize mode when the width and height is defined.</param>
            <param name="bg">Optional background color.</param>
            <param name="focusX">Override the y focus point.</param>
            <param name="focusY">Override the x focus point.</param>
            <param name="nofocus">True to ignore the asset focus point if any.</param>
            <param name="keepformat">True to not use JPEG encoding when quality is set and the image is not a JPEG. Default: false.</param>
            <param name="force">True to force a new resize even if it already stored.</param>
            <param name="format">True to force a new resize even if it already stored.</param>
            <returns>Asset found and content or (resized) image returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.GetAssetFoldersAsync(System.String,System.String,System.Nullable{Squidex.ClientLibrary.Management.AssetFolderScope},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get asset folders.</summary>
            <param name="app">The name of the app.</param>
            <param name="parentId">The optional parent folder id.</param>
            <param name="scope">The scope of the query.</param>
            <returns>Asset folders returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.PostAssetFolderAsync(System.String,Squidex.ClientLibrary.Management.CreateAssetFolderDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create an asset folder.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">The asset folder object that needs to be added to the App.</param>
            <returns>Asset folder created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.PutAssetFolderAsync(System.String,System.String,Squidex.ClientLibrary.Management.RenameAssetFolderDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update an asset folder.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset folder.</param>
            <param name="request">The asset folder object that needs to updated.</param>
            <returns>Asset folder updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.DeleteAssetFolderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete an asset folder.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset folder to delete.</param>
            <returns>Asset folder deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.PutAssetFolderParentAsync(System.String,System.String,Squidex.ClientLibrary.Management.MoveAssetFolderDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Move an asset folder.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset folder.</param>
            <param name="request">The asset folder object that needs to updated.</param>
            <returns>Asset folder moved.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.GetTagsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get assets tags.</summary>
            <param name="app">The name of the app.</param>
            <returns>Assets returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.GetAssetsAsync(System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get assets.</summary>
            <param name="app">The name of the app.</param>
            <param name="top">Optional number of contents to take.</param>
            <param name="skip">Optional number of contents to skip.</param>
            <param name="orderby">Optional OData order definition.</param>
            <param name="filter">Optional OData filter.</param>
            <param name="parentId">The optional parent folder id.</param>
            <param name="ids">The optional asset ids.</param>
            <param name="q">The optional json query.</param>
            <returns>Assets returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.PostAssetAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},Squidex.ClientLibrary.Management.FileParameter,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Upload a new asset.</summary>
            <param name="app">The name of the app.</param>
            <param name="parentId">The optional parent folder id.</param>
            <param name="id">The optional custom asset id.</param>
            <param name="duplicate">True to duplicate the asset, event if the file has been uploaded.</param>
            <returns>Asset created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.GetAssetsPostAsync(System.String,Squidex.ClientLibrary.Management.QueryDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get assets.</summary>
            <param name="app">The name of the app.</param>
            <param name="query">The required query object.</param>
            <returns>Assets returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.GetAssetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get an asset by id.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset to retrieve.</param>
            <returns>Asset found.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.PostUpsertAssetAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},Squidex.ClientLibrary.Management.FileParameter,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Upsert an asset.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The optional custom asset id.</param>
            <param name="parentId">The optional parent folder id.</param>
            <param name="duplicate">True to duplicate the asset, event if the file has been uploaded.</param>
            <returns>Asset created or updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.PutAssetAsync(System.String,System.String,Squidex.ClientLibrary.Management.AnnotateAssetDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update an asset.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset.</param>
            <param name="request">The asset object that needs to updated.</param>
            <returns>Asset updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.DeleteAssetAsync(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete an asset.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset to delete.</param>
            <param name="checkReferrers">True to check referrers of this asset.</param>
            <param name="permanent">True to delete the asset permanently.</param>
            <returns>Asset deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.BulkUpdateAssetsAsync(System.String,Squidex.ClientLibrary.Management.BulkUpdateAssetsDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Bulk update assets.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">The bulk update request.</param>
            <returns>Assets created, update or delete.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.PutAssetContentAsync(System.String,System.String,Squidex.ClientLibrary.Management.FileParameter,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Replace asset content.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset.</param>
            <returns>Asset updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AssetsClient.PutAssetParentAsync(System.String,System.String,Squidex.ClientLibrary.Management.MoveAssetDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Moves the asset.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset.</param>
            <param name="request">The asset object that needs to updated.</param>
            <returns>Asset moved.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IUsersClient.GetUserResourcesAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get the user resources.</summary>
            <returns>User resources returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IUsersClient.GetUsersAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get users by query.</summary>
            <param name="query">The query to search the user by email address. Case invariant.</param>
            <returns>Users returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IUsersClient.GetUserAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get user by id.</summary>
            <param name="id">The id of the user (GUID).</param>
            <returns>User found.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IUsersClient.GetUserPictureAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get user picture by id.</summary>
            <param name="id">The id of the user (GUID).</param>
            <returns>User found and image or fallback returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.UsersClient.GetUserResourcesAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get the user resources.</summary>
            <returns>User resources returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.UsersClient.GetUsersAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get users by query.</summary>
            <param name="query">The query to search the user by email address. Case invariant.</param>
            <returns>Users returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.UsersClient.GetUserAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get user by id.</summary>
            <param name="id">The id of the user (GUID).</param>
            <returns>User found.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.UsersClient.GetUserPictureAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get user picture by id.</summary>
            <param name="id">The id of the user (GUID).</param>
            <returns>User found and image or fallback returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ITranslationsClient.PostTranslationAsync(System.String,Squidex.ClientLibrary.Management.TranslateDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Translate a text.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">The translation request.</param>
            <returns>Text translated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.TranslationsClient.PostTranslationAsync(System.String,Squidex.ClientLibrary.Management.TranslateDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Translate a text.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">The translation request.</param>
            <returns>Text translated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IStatisticsClient.GetLogAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get api calls as log file.</summary>
            <param name="app">The name of the app.</param>
            <returns>Usage tracking results returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IStatisticsClient.GetUsagesAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get api calls in date range.</summary>
            <param name="app">The name of the app.</param>
            <param name="fromDate">The from date.</param>
            <param name="toDate">The to date.</param>
            <returns>API call returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IStatisticsClient.GetCurrentStorageSizeAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get total asset size.</summary>
            <param name="app">The name of the app.</param>
            <returns>Storage usage returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IStatisticsClient.GetStorageSizesAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get asset usage by date.</summary>
            <param name="app">The name of the app.</param>
            <param name="fromDate">The from date.</param>
            <param name="toDate">The to date.</param>
            <returns>Storage usage returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.StatisticsClient.GetLogAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get api calls as log file.</summary>
            <param name="app">The name of the app.</param>
            <returns>Usage tracking results returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.StatisticsClient.GetUsagesAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get api calls in date range.</summary>
            <param name="app">The name of the app.</param>
            <param name="fromDate">The from date.</param>
            <param name="toDate">The to date.</param>
            <returns>API call returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.StatisticsClient.GetCurrentStorageSizeAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get total asset size.</summary>
            <param name="app">The name of the app.</param>
            <returns>Storage usage returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.StatisticsClient.GetStorageSizesAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get asset usage by date.</summary>
            <param name="app">The name of the app.</param>
            <param name="fromDate">The from date.</param>
            <param name="toDate">The to date.</param>
            <returns>Storage usage returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISearchClient.GetSearchResultsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get search results.</summary>
            <param name="app">The name of the app.</param>
            <param name="query">The search query.</param>
            <returns>Search results returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SearchClient.GetSearchResultsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get search results.</summary>
            <param name="app">The name of the app.</param>
            <param name="query">The search query.</param>
            <returns>Search results returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.PostFieldAsync(System.String,System.String,Squidex.ClientLibrary.Management.AddFieldDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Add a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The field object that needs to be added to the schema.</param>
            <returns>Schema field created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.PostNestedFieldAsync(System.String,System.String,System.Int64,Squidex.ClientLibrary.Management.AddFieldDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Add a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="request">The field object that needs to be added to the schema.</param>
            <returns>Schema field created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.PutSchemaUIFieldsAsync(System.String,System.String,Squidex.ClientLibrary.Management.ConfigureUIFieldsDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Configure UI fields.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The request that contains the field names.</param>
            <returns>Schema UI fields defined.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.PutSchemaFieldOrderingAsync(System.String,System.String,Squidex.ClientLibrary.Management.ReorderFieldsDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Reorder all fields.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The request that contains the field ids.</param>
            <returns>Schema fields reordered.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.PutNestedFieldOrderingAsync(System.String,System.String,System.Int64,Squidex.ClientLibrary.Management.ReorderFieldsDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Reorder all nested fields.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="request">The request that contains the field ids.</param>
            <returns>Schema fields reordered.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.PutFieldAsync(System.String,System.String,System.Int64,Squidex.ClientLibrary.Management.UpdateFieldDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="id">The id of the field to update.</param>
            <param name="request">The field object that needs to be added to the schema.</param>
            <returns>Schema field updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.DeleteFieldAsync(System.String,System.String,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="id">The id of the field to disable.</param>
            <returns>Schema field deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.PutNestedFieldAsync(System.String,System.String,System.Int64,System.Int64,Squidex.ClientLibrary.Management.UpdateFieldDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="id">The id of the field to update.</param>
            <param name="request">The field object that needs to be added to the schema.</param>
            <returns>Schema field updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.DeleteNestedFieldAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="id">The id of the field to disable.</param>
            <returns>Schema field deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.LockFieldAsync(System.String,System.String,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Lock a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="id">The id of the field to lock.</param>
            <returns>Schema field shown.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.LockNestedFieldAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Lock a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="id">The id of the field to lock.</param>
            <returns>Schema field hidden.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.HideFieldAsync(System.String,System.String,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Hide a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="id">The id of the field to hide.</param>
            <returns>Schema field hidden.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.HideNestedFieldAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Hide a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="id">The id of the field to hide.</param>
            <returns>Schema field hidden.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.ShowFieldAsync(System.String,System.String,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Show a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="id">The id of the field to show.</param>
            <returns>Schema field shown.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.ShowNestedFieldAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Show a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="id">The id of the field to show.</param>
            <returns>Schema field shown.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.EnableFieldAsync(System.String,System.String,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Enable a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="id">The id of the field to enable.</param>
            <returns>Schema field enabled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.EnableNestedFieldAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Enable a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="id">The id of the field to enable.</param>
            <returns>Schema field enabled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.DisableFieldAsync(System.String,System.String,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Disable a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="id">The id of the field to disable.</param>
            <returns>Schema field disabled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.DisableNestedFieldAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Disable a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="id">The id of the field to disable.</param>
            <returns>Schema field disabled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.GetSchemasAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get schemas.</summary>
            <param name="app">The name of the app.</param>
            <returns>Schemas returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.PostSchemaAsync(System.String,Squidex.ClientLibrary.Management.CreateSchemaDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create a new schema.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">The schema object that needs to be added to the app.</param>
            <returns>Schema created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.GetSchemaAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get a schema by name.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema to retrieve.</param>
            <returns>Schema found.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.PutSchemaAsync(System.String,System.String,Squidex.ClientLibrary.Management.UpdateSchemaDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update a schema.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The schema object that needs to updated.</param>
            <returns>Schema updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.DeleteSchemaAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a schema.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema to delete.</param>
            <returns>Schema deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.PutSchemaSyncAsync(System.String,System.String,Squidex.ClientLibrary.Management.SynchronizeSchemaDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Synchronize a schema.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The schema object that needs to updated.</param>
            <returns>Schema updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.PutCategoryAsync(System.String,System.String,Squidex.ClientLibrary.Management.ChangeCategoryDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update a schema category.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The schema object that needs to updated.</param>
            <returns>Schema updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.PutPreviewUrlsAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update the preview urls.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The preview urls for the schema.</param>
            <returns>Schema updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.PutScriptsAsync(System.String,System.String,Squidex.ClientLibrary.Management.SchemaScriptsDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update the scripts.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The schema scripts object that needs to updated.</param>
            <returns>Schema updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.PutRulesAsync(System.String,System.String,Squidex.ClientLibrary.Management.ConfigureFieldRulesDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update the rules.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The schema rules object that needs to updated.</param>
            <returns>Schema updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.PublishSchemaAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Publish a schema.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema to publish.</param>
            <returns>Schema published.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ISchemasClient.UnpublishSchemaAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Unpublish a schema.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema to unpublish.</param>
            <returns>Schema unpublished.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.PostFieldAsync(System.String,System.String,Squidex.ClientLibrary.Management.AddFieldDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Add a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The field object that needs to be added to the schema.</param>
            <returns>Schema field created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.PostNestedFieldAsync(System.String,System.String,System.Int64,Squidex.ClientLibrary.Management.AddFieldDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Add a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="request">The field object that needs to be added to the schema.</param>
            <returns>Schema field created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.PutSchemaUIFieldsAsync(System.String,System.String,Squidex.ClientLibrary.Management.ConfigureUIFieldsDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Configure UI fields.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The request that contains the field names.</param>
            <returns>Schema UI fields defined.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.PutSchemaFieldOrderingAsync(System.String,System.String,Squidex.ClientLibrary.Management.ReorderFieldsDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Reorder all fields.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The request that contains the field ids.</param>
            <returns>Schema fields reordered.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.PutNestedFieldOrderingAsync(System.String,System.String,System.Int64,Squidex.ClientLibrary.Management.ReorderFieldsDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Reorder all nested fields.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="request">The request that contains the field ids.</param>
            <returns>Schema fields reordered.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.PutFieldAsync(System.String,System.String,System.Int64,Squidex.ClientLibrary.Management.UpdateFieldDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="id">The id of the field to update.</param>
            <param name="request">The field object that needs to be added to the schema.</param>
            <returns>Schema field updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.DeleteFieldAsync(System.String,System.String,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="id">The id of the field to disable.</param>
            <returns>Schema field deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.PutNestedFieldAsync(System.String,System.String,System.Int64,System.Int64,Squidex.ClientLibrary.Management.UpdateFieldDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="id">The id of the field to update.</param>
            <param name="request">The field object that needs to be added to the schema.</param>
            <returns>Schema field updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.DeleteNestedFieldAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="id">The id of the field to disable.</param>
            <returns>Schema field deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.LockFieldAsync(System.String,System.String,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Lock a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="id">The id of the field to lock.</param>
            <returns>Schema field shown.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.LockNestedFieldAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Lock a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="id">The id of the field to lock.</param>
            <returns>Schema field hidden.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.HideFieldAsync(System.String,System.String,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Hide a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="id">The id of the field to hide.</param>
            <returns>Schema field hidden.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.HideNestedFieldAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Hide a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="id">The id of the field to hide.</param>
            <returns>Schema field hidden.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.ShowFieldAsync(System.String,System.String,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Show a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="id">The id of the field to show.</param>
            <returns>Schema field shown.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.ShowNestedFieldAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Show a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="id">The id of the field to show.</param>
            <returns>Schema field shown.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.EnableFieldAsync(System.String,System.String,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Enable a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="id">The id of the field to enable.</param>
            <returns>Schema field enabled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.EnableNestedFieldAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Enable a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="id">The id of the field to enable.</param>
            <returns>Schema field enabled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.DisableFieldAsync(System.String,System.String,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Disable a schema field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="id">The id of the field to disable.</param>
            <returns>Schema field disabled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.DisableNestedFieldAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Disable a nested field.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="parentId">The parent field id.</param>
            <param name="id">The id of the field to disable.</param>
            <returns>Schema field disabled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.GetSchemasAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get schemas.</summary>
            <param name="app">The name of the app.</param>
            <returns>Schemas returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.PostSchemaAsync(System.String,Squidex.ClientLibrary.Management.CreateSchemaDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create a new schema.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">The schema object that needs to be added to the app.</param>
            <returns>Schema created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.GetSchemaAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get a schema by name.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema to retrieve.</param>
            <returns>Schema found.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.PutSchemaAsync(System.String,System.String,Squidex.ClientLibrary.Management.UpdateSchemaDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update a schema.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The schema object that needs to updated.</param>
            <returns>Schema updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.DeleteSchemaAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a schema.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema to delete.</param>
            <returns>Schema deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.PutSchemaSyncAsync(System.String,System.String,Squidex.ClientLibrary.Management.SynchronizeSchemaDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Synchronize a schema.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The schema object that needs to updated.</param>
            <returns>Schema updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.PutCategoryAsync(System.String,System.String,Squidex.ClientLibrary.Management.ChangeCategoryDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update a schema category.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The schema object that needs to updated.</param>
            <returns>Schema updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.PutPreviewUrlsAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update the preview urls.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The preview urls for the schema.</param>
            <returns>Schema updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.PutScriptsAsync(System.String,System.String,Squidex.ClientLibrary.Management.SchemaScriptsDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update the scripts.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The schema scripts object that needs to updated.</param>
            <returns>Schema updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.PutRulesAsync(System.String,System.String,Squidex.ClientLibrary.Management.ConfigureFieldRulesDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update the rules.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema.</param>
            <param name="request">The schema rules object that needs to updated.</param>
            <returns>Schema updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.PublishSchemaAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Publish a schema.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema to publish.</param>
            <returns>Schema published.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.SchemasClient.UnpublishSchemaAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Unpublish a schema.</summary>
            <param name="app">The name of the app.</param>
            <param name="schema">The name of the schema to unpublish.</param>
            <returns>Schema unpublished.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.GetActionsAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get supported rule actions.</summary>
            <returns>Rule actions returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.GetRulesAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get rules.</summary>
            <param name="app">The name of the app.</param>
            <returns>Rules returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.PostRuleAsync(System.String,Squidex.ClientLibrary.Management.CreateRuleDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create a new rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">The rule object that needs to be added to the app.</param>
            <returns>Rule created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.DeleteRuleRunAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Cancel the current run.</summary>
            <param name="app">The name of the app.</param>
            <returns>Rule run cancelled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.PutRuleAsync(System.String,System.String,Squidex.ClientLibrary.Management.UpdateRuleDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update a rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to update.</param>
            <param name="request">The rule object that needs to be added to the app.</param>
            <returns>Rule updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.DeleteRuleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to delete.</param>
            <returns>Rule deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.EnableRuleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Enable a rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to enable.</param>
            <returns>Rule enabled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.DisableRuleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Disable a rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to disable.</param>
            <returns>Rule disabled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.TriggerRuleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Trigger a rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to disable.</param>
            <returns>Rule triggered.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.PutRuleRunAsync(System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Run a rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to run.</param>
            <param name="fromSnapshots">Runs the rule from snapeshots if possible.</param>
            <returns>Rule started.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.DeleteRuleEventsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Cancels all rule events.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to cancel.</param>
            <returns>Rule events cancelled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.SimulateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Simulate a rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to simulate.</param>
            <returns>Rule simulated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.GetEventsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get rule events.</summary>
            <param name="app">The name of the app.</param>
            <param name="ruleId">The optional rule id to filter to events.</param>
            <param name="skip">The number of events to skip.</param>
            <param name="take">The number of events to take.</param>
            <returns>Rule events returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.DeleteEventsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Cancels all events.</summary>
            <param name="app">The name of the app.</param>
            <returns>Events cancelled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.PutEventAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Retry the event immediately.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The event to enqueue.</param>
            <returns>Rule enqueued.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.DeleteEventAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Cancels an event.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The event to enqueue.</param>
            <returns>Rule deqeued.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.GetEventTypesAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Provide a list of all event types that are used in rules.</summary>
            <returns>Rule events returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IRulesClient.GetEventSchemaAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Provide the json schema for the event with the specified name.</summary>
            <param name="type">The type name of the event.</param>
            <returns>Rule event type found.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.GetActionsAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get supported rule actions.</summary>
            <returns>Rule actions returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.GetRulesAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get rules.</summary>
            <param name="app">The name of the app.</param>
            <returns>Rules returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.PostRuleAsync(System.String,Squidex.ClientLibrary.Management.CreateRuleDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create a new rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">The rule object that needs to be added to the app.</param>
            <returns>Rule created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.DeleteRuleRunAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Cancel the current run.</summary>
            <param name="app">The name of the app.</param>
            <returns>Rule run cancelled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.PutRuleAsync(System.String,System.String,Squidex.ClientLibrary.Management.UpdateRuleDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update a rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to update.</param>
            <param name="request">The rule object that needs to be added to the app.</param>
            <returns>Rule updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.DeleteRuleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to delete.</param>
            <returns>Rule deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.EnableRuleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Enable a rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to enable.</param>
            <returns>Rule enabled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.DisableRuleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Disable a rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to disable.</param>
            <returns>Rule disabled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.TriggerRuleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Trigger a rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to disable.</param>
            <returns>Rule triggered.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.PutRuleRunAsync(System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Run a rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to run.</param>
            <param name="fromSnapshots">Runs the rule from snapeshots if possible.</param>
            <returns>Rule started.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.DeleteRuleEventsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Cancels all rule events.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to cancel.</param>
            <returns>Rule events cancelled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.SimulateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Simulate a rule.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the rule to simulate.</param>
            <returns>Rule simulated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.GetEventsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get rule events.</summary>
            <param name="app">The name of the app.</param>
            <param name="ruleId">The optional rule id to filter to events.</param>
            <param name="skip">The number of events to skip.</param>
            <param name="take">The number of events to take.</param>
            <returns>Rule events returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.DeleteEventsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Cancels all events.</summary>
            <param name="app">The name of the app.</param>
            <returns>Events cancelled.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.PutEventAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Retry the event immediately.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The event to enqueue.</param>
            <returns>Rule enqueued.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.DeleteEventAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Cancels an event.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The event to enqueue.</param>
            <returns>Rule deqeued.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.GetEventTypesAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Provide a list of all event types that are used in rules.</summary>
            <returns>Rule events returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.RulesClient.GetEventSchemaAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Provide the json schema for the event with the specified name.</summary>
            <param name="type">The type name of the event.</param>
            <returns>Rule event type found.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IPlansClient.GetPlansAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get app plan information.</summary>
            <param name="app">The name of the app.</param>
            <returns>App plan information returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IPlansClient.PutPlanAsync(System.String,Squidex.ClientLibrary.Management.ChangePlanDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Change the app plan.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">Plan object that needs to be changed.</param>
            <returns>Plan changed or redirect url returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.PlansClient.GetPlansAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get app plan information.</summary>
            <param name="app">The name of the app.</param>
            <returns>App plan information returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.PlansClient.PutPlanAsync(System.String,Squidex.ClientLibrary.Management.ChangePlanDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Change the app plan.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">Plan object that needs to be changed.</param>
            <returns>Plan changed or redirect url returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IPingClient.GetInfoAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get API information.</summary>
            <returns>Infos returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IPingClient.GetPingAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get ping status of the API.</summary>
            <returns>Service ping successful.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IPingClient.GetAppPingAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get ping status.</summary>
            <param name="app">The name of the app.</param>
            <returns>Service ping successful.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.PingClient.GetInfoAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get API information.</summary>
            <returns>Infos returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.PingClient.GetPingAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get ping status of the API.</summary>
            <returns>Service ping successful.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.PingClient.GetAppPingAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get ping status.</summary>
            <param name="app">The name of the app.</param>
            <returns>Service ping successful.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.INewsClient.GetNewsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get features since version.</summary>
            <param name="version">The latest received version.</param>
            <returns>Latest features returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.NewsClient.GetNewsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get features since version.</summary>
            <param name="version">The latest received version.</param>
            <returns>Latest features returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ILanguagesClient.GetLanguagesAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get supported languages.</summary>
            <returns>Supported language codes returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.LanguagesClient.GetLanguagesAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get supported languages.</summary>
            <returns>Supported language codes returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IHistoryClient.GetHistoryAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get historical events.</summary>
            <param name="app">The name of the app.</param>
            <param name="channel">The name of the channel.</param>
            <returns>Events returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.HistoryClient.GetHistoryAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get historical events.</summary>
            <param name="app">The name of the app.</param>
            <param name="channel">The name of the channel.</param>
            <returns>Events returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ICommentsClient.GetCommentsAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get all comments.</summary>
            <param name="app">The name of the app.</param>
            <param name="commentsId">The id of the comments.</param>
            <param name="version">The current version.</param>
            <returns>Comments returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ICommentsClient.PostCommentAsync(System.String,System.String,Squidex.ClientLibrary.Management.UpsertCommentDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create a new comment.</summary>
            <param name="app">The name of the app.</param>
            <param name="commentsId">The id of the comments.</param>
            <param name="request">The comment object that needs to created.</param>
            <returns>Comment created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ICommentsClient.PutCommentAsync(System.String,System.String,System.String,Squidex.ClientLibrary.Management.UpsertCommentDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update a comment.</summary>
            <param name="app">The name of the app.</param>
            <param name="commentsId">The id of the comments.</param>
            <param name="commentId">The id of the comment.</param>
            <param name="request">The comment object that needs to updated.</param>
            <returns>Comment updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.ICommentsClient.DeleteCommentAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a comment.</summary>
            <param name="app">The name of the app.</param>
            <param name="commentsId">The id of the comments.</param>
            <param name="commentId">The id of the comment.</param>
            <returns>Comment deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.CommentsClient.GetCommentsAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get all comments.</summary>
            <param name="app">The name of the app.</param>
            <param name="commentsId">The id of the comments.</param>
            <param name="version">The current version.</param>
            <returns>Comments returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.CommentsClient.PostCommentAsync(System.String,System.String,Squidex.ClientLibrary.Management.UpsertCommentDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create a new comment.</summary>
            <param name="app">The name of the app.</param>
            <param name="commentsId">The id of the comments.</param>
            <param name="request">The comment object that needs to created.</param>
            <returns>Comment created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.CommentsClient.PutCommentAsync(System.String,System.String,System.String,Squidex.ClientLibrary.Management.UpsertCommentDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update a comment.</summary>
            <param name="app">The name of the app.</param>
            <param name="commentsId">The id of the comments.</param>
            <param name="commentId">The id of the comment.</param>
            <param name="request">The comment object that needs to updated.</param>
            <returns>Comment updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.CommentsClient.DeleteCommentAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a comment.</summary>
            <param name="app">The name of the app.</param>
            <param name="commentsId">The id of the comments.</param>
            <param name="commentId">The id of the comment.</param>
            <returns>Comment deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.INotificationsClient.GetNotificationsAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get all notifications.</summary>
            <param name="userId">The user id.</param>
            <param name="version">The current version.</param>
            <returns>All comments returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.INotificationsClient.DeleteCommentAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a notification.</summary>
            <param name="userId">The user id.</param>
            <param name="commentId">The id of the comment.</param>
            <returns>Comment deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.NotificationsClient.GetNotificationsAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get all notifications.</summary>
            <param name="userId">The user id.</param>
            <param name="version">The current version.</param>
            <returns>All comments returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.NotificationsClient.DeleteCommentAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a notification.</summary>
            <param name="userId">The user id.</param>
            <param name="commentId">The id of the comment.</param>
            <returns>Comment deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IBackupsClient.GetBackupContentAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get the backup content.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset.</param>
            <returns>Backup found and content returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IBackupsClient.DeleteBackupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a backup.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the backup to delete.</param>
            <returns>Backup deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IBackupsClient.GetBackupsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get all backup jobs.</summary>
            <param name="app">The name of the app.</param>
            <returns>Backups returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IBackupsClient.PostBackupAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Start a new backup.</summary>
            <param name="app">The name of the app.</param>
            <returns>Backup started.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IBackupsClient.GetRestoreJobAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get current restore status.</summary>
            <returns>Status returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IBackupsClient.PostRestoreJobAsync(Squidex.ClientLibrary.Management.RestoreRequestDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Restore a backup.</summary>
            <param name="request">The backup to restore.</param>
            <returns>Restore operation started.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.BackupsClient.GetBackupContentAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get the backup content.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the asset.</param>
            <returns>Backup found and content returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.BackupsClient.DeleteBackupAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a backup.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the backup to delete.</param>
            <returns>Backup deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.BackupsClient.GetBackupsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get all backup jobs.</summary>
            <param name="app">The name of the app.</param>
            <returns>Backups returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.BackupsClient.PostBackupAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Start a new backup.</summary>
            <param name="app">The name of the app.</param>
            <returns>Backup started.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.BackupsClient.GetRestoreJobAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get current restore status.</summary>
            <returns>Status returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.BackupsClient.PostRestoreJobAsync(Squidex.ClientLibrary.Management.RestoreRequestDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Restore a backup.</summary>
            <param name="request">The backup to restore.</param>
            <returns>Restore operation started.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.GetScriptsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get the app asset scripts.</summary>
            <param name="app">The name of the app to get the asset scripts for.</param>
            <returns>App asset scripts returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.PutScriptsAsync(System.String,Squidex.ClientLibrary.Management.UpdateAssetScriptsDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update the app asset scripts.</summary>
            <param name="app">The name of the app to update.</param>
            <param name="request">The values to update.</param>
            <returns>App updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.GetClientsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get app clients.</summary>
            <param name="app">The name of the app.</param>
            <returns>Clients returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.PostClientAsync(System.String,Squidex.ClientLibrary.Management.CreateClientDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create a new app client.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">Client object that needs to be added to the app.</param>
            <returns>Client created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.PutClientAsync(System.String,System.String,Squidex.ClientLibrary.Management.UpdateClientDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Updates an app client.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the client that must be updated.</param>
            <param name="request">Client object that needs to be updated.</param>
            <returns>Client updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.DeleteClientAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Revoke an app client.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the client that must be deleted.</param>
            <returns>Client deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.GetContributorsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get app contributors.</summary>
            <param name="app">The name of the app.</param>
            <returns>Contributors returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.PostContributorAsync(System.String,Squidex.ClientLibrary.Management.AssignContributorDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Assign contributor to app.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">Contributor object that needs to be added to the app.</param>
            <returns>Contributor assigned to app.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.DeleteMyselfAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Remove yourself.</summary>
            <param name="app">The name of the app.</param>
            <returns>Contributor removed.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.DeleteContributorAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Remove contributor.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the contributor.</param>
            <returns>Contributor removed.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.GetLanguagesAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get app languages.</summary>
            <param name="app">The name of the app.</param>
            <returns>Languages returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.PostLanguageAsync(System.String,Squidex.ClientLibrary.Management.AddLanguageDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Attaches an app language.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">The language to add to the app.</param>
            <returns>Language created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.PutLanguageAsync(System.String,System.String,Squidex.ClientLibrary.Management.UpdateLanguageDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Updates an app language.</summary>
            <param name="app">The name of the app.</param>
            <param name="language">The language to update.</param>
            <param name="request">The language object.</param>
            <returns>Language updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.DeleteLanguageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Deletes an app language.</summary>
            <param name="app">The name of the app.</param>
            <param name="language">The language to delete from the app.</param>
            <returns>Language deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.GetRolesAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get app roles.</summary>
            <param name="app">The name of the app.</param>
            <returns>Roles returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.PostRoleAsync(System.String,Squidex.ClientLibrary.Management.AddRoleDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Add role to app.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">Role object that needs to be added to the app.</param>
            <returns>Role created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.GetPermissionsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get app permissions.</summary>
            <param name="app">The name of the app.</param>
            <returns>App permissions returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.PutRoleAsync(System.String,System.String,Squidex.ClientLibrary.Management.UpdateRoleDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update an app role.</summary>
            <param name="app">The name of the app.</param>
            <param name="roleName">The name of the role to be updated.</param>
            <param name="request">Role to be updated for the app.</param>
            <returns>Role updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.DeleteRoleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Remove role from app.</summary>
            <param name="app">The name of the app.</param>
            <param name="roleName">The name of the role.</param>
            <returns>Role deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.GetAppsAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get your apps.</summary>
            <returns>Apps returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.PostAppAsync(Squidex.ClientLibrary.Management.CreateAppDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create a new app.</summary>
            <param name="request">The app object that needs to be added to Squidex.</param>
            <returns>App created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.GetAppAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get an app by name.</summary>
            <param name="app">The name of the app.</param>
            <returns>Apps returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.PutAppAsync(System.String,Squidex.ClientLibrary.Management.UpdateAppDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update the app.</summary>
            <param name="app">The name of the app to update.</param>
            <param name="request">The values to update.</param>
            <returns>App updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.DeleteAppAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete the app.</summary>
            <param name="app">The name of the app to delete.</param>
            <returns>App deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.UploadImageAsync(System.String,Squidex.ClientLibrary.Management.FileParameter,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Upload the app image.</summary>
            <param name="app">The name of the app to update.</param>
            <returns>App image uploaded.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.GetImageAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get the app image.</summary>
            <param name="app">The name of the app.</param>
            <returns>App image found and content or (resized) image returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.DeleteImageAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Remove the app image.</summary>
            <param name="app">The name of the app to update.</param>
            <returns>App image removed.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.GetSettingsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get the app settings.</summary>
            <param name="app">The name of the app to get the settings for.</param>
            <returns>App settingsd returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.PutSettingsAsync(System.String,Squidex.ClientLibrary.Management.UpdateAppSettingsDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update the app settings.</summary>
            <param name="app">The name of the app to update.</param>
            <param name="request">The values to update.</param>
            <returns>App updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.GetWorkflowsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get app workflow.</summary>
            <param name="app">The name of the app.</param>
            <returns>Workflows returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.PostWorkflowAsync(System.String,Squidex.ClientLibrary.Management.AddWorkflowDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create a workflow.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">The new workflow.</param>
            <returns>Workflow created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.PutWorkflowAsync(System.String,System.String,Squidex.ClientLibrary.Management.UpdateWorkflowDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update a workflow.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the workflow to update.</param>
            <param name="request">The new workflow.</param>
            <returns>Workflow updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.IAppsClient.DeleteWorkflowAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a workflow.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the workflow to update.</param>
            <returns>Workflow deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.GetScriptsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get the app asset scripts.</summary>
            <param name="app">The name of the app to get the asset scripts for.</param>
            <returns>App asset scripts returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.PutScriptsAsync(System.String,Squidex.ClientLibrary.Management.UpdateAssetScriptsDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update the app asset scripts.</summary>
            <param name="app">The name of the app to update.</param>
            <param name="request">The values to update.</param>
            <returns>App updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.GetClientsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get app clients.</summary>
            <param name="app">The name of the app.</param>
            <returns>Clients returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.PostClientAsync(System.String,Squidex.ClientLibrary.Management.CreateClientDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create a new app client.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">Client object that needs to be added to the app.</param>
            <returns>Client created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.PutClientAsync(System.String,System.String,Squidex.ClientLibrary.Management.UpdateClientDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Updates an app client.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the client that must be updated.</param>
            <param name="request">Client object that needs to be updated.</param>
            <returns>Client updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.DeleteClientAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Revoke an app client.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the client that must be deleted.</param>
            <returns>Client deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.GetContributorsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get app contributors.</summary>
            <param name="app">The name of the app.</param>
            <returns>Contributors returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.PostContributorAsync(System.String,Squidex.ClientLibrary.Management.AssignContributorDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Assign contributor to app.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">Contributor object that needs to be added to the app.</param>
            <returns>Contributor assigned to app.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.DeleteMyselfAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Remove yourself.</summary>
            <param name="app">The name of the app.</param>
            <returns>Contributor removed.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.DeleteContributorAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Remove contributor.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the contributor.</param>
            <returns>Contributor removed.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.GetLanguagesAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get app languages.</summary>
            <param name="app">The name of the app.</param>
            <returns>Languages returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.PostLanguageAsync(System.String,Squidex.ClientLibrary.Management.AddLanguageDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Attaches an app language.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">The language to add to the app.</param>
            <returns>Language created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.PutLanguageAsync(System.String,System.String,Squidex.ClientLibrary.Management.UpdateLanguageDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Updates an app language.</summary>
            <param name="app">The name of the app.</param>
            <param name="language">The language to update.</param>
            <param name="request">The language object.</param>
            <returns>Language updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.DeleteLanguageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Deletes an app language.</summary>
            <param name="app">The name of the app.</param>
            <param name="language">The language to delete from the app.</param>
            <returns>Language deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.GetRolesAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get app roles.</summary>
            <param name="app">The name of the app.</param>
            <returns>Roles returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.PostRoleAsync(System.String,Squidex.ClientLibrary.Management.AddRoleDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Add role to app.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">Role object that needs to be added to the app.</param>
            <returns>Role created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.GetPermissionsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get app permissions.</summary>
            <param name="app">The name of the app.</param>
            <returns>App permissions returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.PutRoleAsync(System.String,System.String,Squidex.ClientLibrary.Management.UpdateRoleDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update an app role.</summary>
            <param name="app">The name of the app.</param>
            <param name="roleName">The name of the role to be updated.</param>
            <param name="request">Role to be updated for the app.</param>
            <returns>Role updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.DeleteRoleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Remove role from app.</summary>
            <param name="app">The name of the app.</param>
            <param name="roleName">The name of the role.</param>
            <returns>Role deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.GetAppsAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get your apps.</summary>
            <returns>Apps returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.PostAppAsync(Squidex.ClientLibrary.Management.CreateAppDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create a new app.</summary>
            <param name="request">The app object that needs to be added to Squidex.</param>
            <returns>App created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.GetAppAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get an app by name.</summary>
            <param name="app">The name of the app.</param>
            <returns>Apps returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.PutAppAsync(System.String,Squidex.ClientLibrary.Management.UpdateAppDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update the app.</summary>
            <param name="app">The name of the app to update.</param>
            <param name="request">The values to update.</param>
            <returns>App updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.DeleteAppAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete the app.</summary>
            <param name="app">The name of the app to delete.</param>
            <returns>App deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.UploadImageAsync(System.String,Squidex.ClientLibrary.Management.FileParameter,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Upload the app image.</summary>
            <param name="app">The name of the app to update.</param>
            <returns>App image uploaded.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.GetImageAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get the app image.</summary>
            <param name="app">The name of the app.</param>
            <returns>App image found and content or (resized) image returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.DeleteImageAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Remove the app image.</summary>
            <param name="app">The name of the app to update.</param>
            <returns>App image removed.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.GetSettingsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get the app settings.</summary>
            <param name="app">The name of the app to get the settings for.</param>
            <returns>App settingsd returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.PutSettingsAsync(System.String,Squidex.ClientLibrary.Management.UpdateAppSettingsDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update the app settings.</summary>
            <param name="app">The name of the app to update.</param>
            <param name="request">The values to update.</param>
            <returns>App updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.GetWorkflowsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get app workflow.</summary>
            <param name="app">The name of the app.</param>
            <returns>Workflows returned.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.PostWorkflowAsync(System.String,Squidex.ClientLibrary.Management.AddWorkflowDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create a workflow.</summary>
            <param name="app">The name of the app.</param>
            <param name="request">The new workflow.</param>
            <returns>Workflow created.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.PutWorkflowAsync(System.String,System.String,Squidex.ClientLibrary.Management.UpdateWorkflowDto,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update a workflow.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the workflow to update.</param>
            <param name="request">The new workflow.</param>
            <returns>Workflow updated.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.AppsClient.DeleteWorkflowAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete a workflow.</summary>
            <param name="app">The name of the app.</param>
            <param name="id">The id of the workflow to update.</param>
            <returns>Workflow deleted.</returns>
            <exception cref="T:Squidex.ClientLibrary.Management.SquidexManagementException">A server side error occurred.</exception>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UsersDto.Total">
            <summary>The total number of users.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UsersDto.Items">
            <summary>The users.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UserDto.Id">
            <summary>The id of the user.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UserDto.Email">
            <summary>The email of the user. Unique value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UserDto.DisplayName">
            <summary>The display name (usually first name and last name) of the user.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UserDto.IsLocked">
            <summary>Determines if the user is locked.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UserDto.Permissions">
            <summary>Additional permissions for the user.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.Resource._links">
            <summary>The links.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ResourceLink.Href">
            <summary>The link url.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ResourceLink.Method">
            <summary>The link method.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ResourceLink.Metadata">
            <summary>Additional data about the link.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateUserDto.Email">
            <summary>The email of the user. Unique value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateUserDto.DisplayName">
            <summary>The display name (usually first name and last name) of the user.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateUserDto.Password">
            <summary>The password of the user.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateUserDto.Permissions">
            <summary>Additional permissions for the user.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateUserDto.Email">
            <summary>The email of the user. Unique value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateUserDto.DisplayName">
            <summary>The display name (usually first name and last name) of the user.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateUserDto.Password">
            <summary>The password of the user.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateUserDto.Permissions">
            <summary>Additional permissions for the user.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UISettingsDto.CanCreateApps">
            <summary>True when the user can create apps.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateSettingDto.Value">
            <summary>The value for the setting.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.EventConsumersDto.Items">
            <summary>The event consumers.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentsDto.Total">
            <summary>The total number of content items.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentsDto.Items">
            <summary>The content items.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentsDto.Statuses">
            <summary>The possible statuses.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.Id">
            <summary>The if of the content item.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.CreatedBy">
            <summary>The user that has created the content item.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.LastModifiedBy">
            <summary>The user that has updated the content item.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.Data">
            <summary>The data of the content item.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.ReferenceData">
            <summary>The reference data for the frontend UI.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.Created">
            <summary>The date and time when the content item has been created.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.LastModified">
            <summary>The date and time when the content item has been modified last.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.Status">
            <summary>The status of the content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.NewStatus">
            <summary>The new status of the content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.StatusColor">
            <summary>The color of the status.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.NewStatusColor">
            <summary>The color of the new status.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.ScheduleJob">
            <summary>The scheduled status.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.SchemaId">
            <summary>The id of the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.SchemaName">
            <summary>The name of the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.SchemaDisplayName">
            <summary>The display name of the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.ReferenceFields">
            <summary>The reference fields.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentDto.Version">
            <summary>The version of the content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ScheduleJobDto.Id">
            <summary>The id of the schedule job.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ScheduleJobDto.Status">
            <summary>The new status.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ScheduleJobDto.DueTime">
            <summary>The target date and time when the content should be scheduled.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ScheduleJobDto.Color">
            <summary>The color of the scheduled status.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ScheduleJobDto.ScheduledBy">
            <summary>The user who schedule the content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldDto.FieldId">
            <summary>The id of the field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldDto.Name">
            <summary>The name of the field. Must be unique within the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldDto.IsHidden">
            <summary>Defines if the field is hidden.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldDto.IsLocked">
            <summary>Defines if the field is locked.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldDto.IsDisabled">
            <summary>Defines if the field is disabled.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldDto.Partitioning">
            <summary>Defines the partitioning of the field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldDto.Properties">
            <summary>The field properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldDto.Nested">
            <summary>The nested fields.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldPropertiesDto.Label">
            <summary>Optional label for the editor.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldPropertiesDto.Hints">
            <summary>Hints to describe the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldPropertiesDto.Placeholder">
            <summary>Placeholder to show when no value has been entered.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldPropertiesDto.IsRequired">
            <summary>Indicates if the field is required.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldPropertiesDto.IsRequiredOnPublish">
            <summary>Indicates if the field is required when publishing.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldPropertiesDto.IsHalfWidth">
            <summary>Indicates if the field should be rendered with half width only.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldPropertiesDto.EditorUrl">
            <summary>Optional url to the editor.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldPropertiesDto.Tags">
            <summary>Tags for automation processes.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ArrayFieldPropertiesDto.MinItems">
            <summary>The minimum allowed items for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ArrayFieldPropertiesDto.MaxItems">
            <summary>The maximum allowed items for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.PreviewMode">
            <summary>The preview mode for the asset.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.DefaultValues">
            <summary>The language specific default value as a list of asset ids.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.DefaultValue">
            <summary>The default value as a list of asset ids.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.FolderId">
            <summary>The initial id to the folder.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.MinItems">
            <summary>The minimum allowed items for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.MaxItems">
            <summary>The maximum allowed items for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.MinSize">
            <summary>The minimum file size in bytes.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.MaxSize">
            <summary>The maximum file size in bytes.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.MinWidth">
            <summary>The minimum image width in pixels.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.MaxWidth">
            <summary>The maximum image width in pixels.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.MinHeight">
            <summary>The minimum image height in pixels.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.MaxHeight">
            <summary>The maximum image height in pixels.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.AspectWidth">
            <summary>The image aspect width in pixels.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.AspectHeight">
            <summary>The image aspect height in pixels.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.ExpectedType">
            <summary>The expected type.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.ResolveFirst">
            <summary>True to resolve first asset in the content list.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.MustBeImage">
            <summary>True to resolve first image in the content list.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.ResolveImage">
            <summary>True to resolve first image in the content list.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.AllowedExtensions">
            <summary>The allowed file extensions.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsFieldPropertiesDto.AllowDuplicates">
            <summary>True, if duplicate values are allowed.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BooleanFieldPropertiesDto.DefaultValues">
            <summary>The language specific default value for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BooleanFieldPropertiesDto.DefaultValue">
            <summary>The default value for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BooleanFieldPropertiesDto.InlineEditable">
            <summary>Indicates that the inline editor is enabled for this field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BooleanFieldPropertiesDto.Editor">
            <summary>The editor that is used to manage this field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ComponentFieldPropertiesDto.SchemaIds">
            <summary>The id of the embedded schemas.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ComponentsFieldPropertiesDto.MinItems">
            <summary>The minimum allowed items for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ComponentsFieldPropertiesDto.MaxItems">
            <summary>The maximum allowed items for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ComponentsFieldPropertiesDto.SchemaIds">
            <summary>The id of the embedded schemas.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.DateTimeFieldPropertiesDto.DefaultValues">
            <summary>The language specific default value for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.DateTimeFieldPropertiesDto.DefaultValue">
            <summary>The default value for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.DateTimeFieldPropertiesDto.MaxValue">
            <summary>The maximum allowed value for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.DateTimeFieldPropertiesDto.MinValue">
            <summary>The minimum allowed value for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.DateTimeFieldPropertiesDto.Format">
            <summary>The format pattern when displayed in the UI.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.DateTimeFieldPropertiesDto.Editor">
            <summary>The editor that is used to manage this field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.DateTimeFieldPropertiesDto.CalculatedDefaultValue">
            <summary>The calculated default value for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.GeolocationFieldPropertiesDto.Editor">
            <summary>The editor that is used to manage this field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NumberFieldPropertiesDto.DefaultValues">
            <summary>The language specific default value for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NumberFieldPropertiesDto.DefaultValue">
            <summary>The default value for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NumberFieldPropertiesDto.MaxValue">
            <summary>The maximum allowed value for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NumberFieldPropertiesDto.MinValue">
            <summary>The minimum allowed value for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NumberFieldPropertiesDto.AllowedValues">
            <summary>The allowed values for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NumberFieldPropertiesDto.IsUnique">
            <summary>Indicates if the field value must be unique. Ignored for nested fields and localized fields.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NumberFieldPropertiesDto.InlineEditable">
            <summary>Indicates that the inline editor is enabled for this field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NumberFieldPropertiesDto.Editor">
            <summary>The editor that is used to manage this field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ReferencesFieldPropertiesDto.DefaultValues">
            <summary>The language specific default value as a list of content ids.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ReferencesFieldPropertiesDto.DefaultValue">
            <summary>The default value as a list of content ids.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ReferencesFieldPropertiesDto.MinItems">
            <summary>The minimum allowed items for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ReferencesFieldPropertiesDto.MaxItems">
            <summary>The maximum allowed items for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ReferencesFieldPropertiesDto.AllowDuplicates">
            <summary>True, if duplicate values are allowed.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ReferencesFieldPropertiesDto.ResolveReference">
            <summary>True to resolve references in the content list.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ReferencesFieldPropertiesDto.MustBePublished">
            <summary>True when all references must be published.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ReferencesFieldPropertiesDto.Editor">
            <summary>The editor that is used to manage this field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ReferencesFieldPropertiesDto.SchemaIds">
            <summary>The id of the referenced schemas.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.DefaultValues">
            <summary>The language specific default value for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.DefaultValue">
            <summary>The default value for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.Pattern">
            <summary>The pattern to enforce a specific format for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.PatternMessage">
            <summary>The validation message for the pattern.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.FolderId">
            <summary>The initial id to the folder when the control supports file uploads.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.MinLength">
            <summary>The minimum allowed length for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.MaxLength">
            <summary>The maximum allowed length for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.MinCharacters">
            <summary>The minimum allowed of normal characters for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.MaxCharacters">
            <summary>The maximum allowed of normal characters for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.MinWords">
            <summary>The minimum allowed number of words for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.MaxWords">
            <summary>The maximum allowed number of words for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.AllowedValues">
            <summary>The allowed values for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.IsUnique">
            <summary>Indicates if the field value must be unique. Ignored for nested fields and localized fields.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.InlineEditable">
            <summary>Indicates that the inline editor is enabled for this field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.ContentType">
            <summary>How the string content should be interpreted.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StringFieldPropertiesDto.Editor">
            <summary>The editor that is used to manage this field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.TagsFieldPropertiesDto.DefaultValues">
            <summary>The language specific default value for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.TagsFieldPropertiesDto.DefaultValue">
            <summary>The default value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.TagsFieldPropertiesDto.MinItems">
            <summary>The minimum allowed items for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.TagsFieldPropertiesDto.MaxItems">
            <summary>The maximum allowed items for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.TagsFieldPropertiesDto.AllowedValues">
            <summary>The allowed values for the field value.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.TagsFieldPropertiesDto.Editor">
            <summary>The editor that is used to manage this field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UIFieldPropertiesDto.Editor">
            <summary>The editor that is used to manage this field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NestedFieldDto.FieldId">
            <summary>The id of the field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NestedFieldDto.Name">
            <summary>The name of the field. Must be unique within the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NestedFieldDto.IsHidden">
            <summary>Defines if the field is hidden.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NestedFieldDto.IsLocked">
            <summary>Defines if the field is locked.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NestedFieldDto.IsDisabled">
            <summary>Defines if the field is disabled.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NestedFieldDto.Properties">
            <summary>The field properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StatusInfoDto.Status">
            <summary>The name of the status.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StatusInfoDto.Color">
            <summary>The color of the status.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AllContentsByPostDto.Ids">
            <summary>The list of ids to query.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AllContentsByPostDto.ScheduledFrom">
            <summary>The start of the schedule.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AllContentsByPostDto.ScheduledTo">
            <summary>The end of the schedule.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.QueryDto.Ids">
            <summary>The optional list of ids to query.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.QueryDto.OData">
            <summary>The optional odata query.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.QueryDto.Q">
            <summary>The optional json query.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.QueryDto.ParentId">
            <summary>The parent id (for assets).</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkResultDto.Error">
            <summary>The error when the bulk job failed.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkResultDto.JobIndex">
            <summary>The index of the bulk job where the result belongs to. The order can change.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkResultDto.Id">
            <summary>The id of the entity that has been handled successfully or not.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkResultDto.ContentId">
            <summary>The id of the entity that has been handled successfully or not.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ImportContentsDto.Datas">
            <summary>The data to import.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ImportContentsDto.Publish">
            <summary>True to automatically publish the content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ImportContentsDto.DoNotScript">
            <summary>True to turn off scripting for faster inserts. Default: true.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ImportContentsDto.OptimizeValidation">
            <summary>True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsDto.Jobs">
            <summary>The contents to update or insert.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsDto.Publish">
            <summary>True to automatically publish the content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsDto.DoNotScript">
            <summary>True to turn off scripting for faster inserts. Default: true.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsDto.DoNotValidate">
            <summary>True to turn off validation for faster inserts. Default: false.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsDto.DoNotValidateWorkflow">
            <summary>True to turn off validation of workflow rules. Default: false.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsDto.CheckReferrers">
            <summary>True to check referrers of deleted contents.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsDto.OptimizeValidation">
            <summary>True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsJobDto.Query">
            <summary>An optional query to identify the content to update.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsJobDto.Id">
            <summary>An optional id of the content to update.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsJobDto.Data">
            <summary>The data of the content when type is set to 'Upsert', 'Create', 'Update' or 'Patch.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsJobDto.Status">
            <summary>The new status when the type is set to 'ChangeStatus' or 'Upsert'.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsJobDto.DueTime">
            <summary>The due time.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsJobDto.Type">
            <summary>The update type.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsJobDto.Schema">
            <summary>The optional schema id or name.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsJobDto.Permanent">
            <summary>True to delete the content permanently.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsJobDto.ExpectedCount">
            <summary>The number of expected items. Set it to a higher number to update multiple items when a query is defined.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateContentsJobDto.ExpectedVersion">
            <summary>The expected version.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ChangeStatusDto.Status">
            <summary>The new status.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ChangeStatusDto.DueTime">
            <summary>The due time.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ChangeStatusDto.CheckReferrers">
            <summary>True to check referrers of this content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.TranslationDto.Result">
            <summary>The result of the translation.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.TranslationDto.Text">
            <summary>The translated text.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.TranslateDto.Text">
            <summary>The text to translate.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.TranslateDto.TargetLanguage">
            <summary>The target language.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.TranslateDto.SourceLanguage">
            <summary>The optional source language.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.LogDownloadDto.DownloadUrl">
            <summary>The url to download the log.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CallsUsageDtoDto.TotalCalls">
            <summary>The total number of API calls.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CallsUsageDtoDto.TotalBytes">
            <summary>The total number of bytes transferred.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CallsUsageDtoDto.MonthCalls">
            <summary>The total number of API calls this month.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CallsUsageDtoDto.MonthBytes">
            <summary>The total number of bytes transferred this month.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CallsUsageDtoDto.BlockingApiCalls">
            <summary>The amount of calls that will block the app.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CallsUsageDtoDto.AllowedBytes">
            <summary>The included API traffic.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CallsUsageDtoDto.AllowedCalls">
            <summary>The included API calls.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CallsUsageDtoDto.AverageElapsedMs">
            <summary>The average duration in milliseconds.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CallsUsageDtoDto.Details">
            <summary>The statistics by date and group.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CallsUsagePerDateDto.Date">
            <summary>The date when the usage was tracked.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CallsUsagePerDateDto.TotalCalls">
            <summary>The total number of API calls.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CallsUsagePerDateDto.TotalBytes">
            <summary>The total number of bytes transferred.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CallsUsagePerDateDto.AverageElapsedMs">
            <summary>The average duration in milliseconds.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CurrentStorageDto.Size">
            <summary>The size in bytes.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CurrentStorageDto.MaxAllowed">
            <summary>The maximum allowed asset size.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StorageUsagePerDateDto.Date">
            <summary>The date when the usage was tracked.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StorageUsagePerDateDto.TotalCount">
            <summary>The number of assets.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.StorageUsagePerDateDto.TotalSize">
            <summary>The size in bytes.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SearchResultDto.Name">
            <summary>The name of the search result.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SearchResultDto.Type">
            <summary>The type of the search result.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SearchResultDto.Label">
            <summary>An optional label.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.Id">
            <summary>The id of the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.CreatedBy">
            <summary>The user that has created the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.LastModifiedBy">
            <summary>The user that has updated the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.Name">
            <summary>The name of the schema. Unique within the app.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.Type">
            <summary>The type of the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.Category">
            <summary>The name of the category.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.Properties">
            <summary>The schema properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.IsSingleton">
            <summary>Indicates if the schema is a singleton.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.IsPublished">
            <summary>Indicates if the schema is published.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.Created">
            <summary>The date and time when the schema has been created.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.LastModified">
            <summary>The date and time when the schema has been modified last.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.Version">
            <summary>The version of the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.Scripts">
            <summary>The scripts.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.PreviewUrls">
            <summary>The preview Urls.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.FieldsInLists">
            <summary>The name of fields that are used in content lists.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.FieldsInReferences">
            <summary>The name of fields that are used in content references.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.FieldRules">
            <summary>The field rules.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaDto.Fields">
            <summary>The list of fields.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaPropertiesDto.Label">
            <summary>Optional label for the editor.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaPropertiesDto.Hints">
            <summary>Hints to describe the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaPropertiesDto.ContentsSidebarUrl">
            <summary>The url to a the sidebar plugin for content lists.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaPropertiesDto.ContentSidebarUrl">
            <summary>The url to a the sidebar plugin for content items.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaPropertiesDto.ContentEditorUrl">
            <summary>The url to the editor plugin.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaPropertiesDto.ValidateOnPublish">
            <summary>True to validate the content items on publish.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaPropertiesDto.Tags">
            <summary>Tags for automation processes.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaScriptsDto.Query">
            <summary>The script that is executed for each query when querying contents.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaScriptsDto.Create">
            <summary>The script that is executed when creating a content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaScriptsDto.Update">
            <summary>The script that is executed when updating a content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaScriptsDto.Delete">
            <summary>The script that is executed when deleting a content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaScriptsDto.Change">
            <summary>The script that is executed when change a content status.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldRuleDto.Action">
            <summary>The action to perform when the condition is met.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldRuleDto.Field">
            <summary>The field to update.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FieldRuleDto.Condition">
            <summary>The condition.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AddFieldDto.Name">
            <summary>The name of the field. Must be unique within the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AddFieldDto.Partitioning">
            <summary>Determines the optional partitioning of the field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AddFieldDto.Properties">
            <summary>The field properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ConfigureUIFieldsDto.FieldsInLists">
            <summary>The name of fields that are used in content lists.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ConfigureUIFieldsDto.FieldsInReferences">
            <summary>The name of fields that are used in content references.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ReorderFieldsDto.FieldIds">
            <summary>The field ids in the target order.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateFieldDto.Properties">
            <summary>The field properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemasDto.Items">
            <summary>The schemas.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateSchemaDto.Name">
            <summary>The name of the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateSchemaDto.Type">
            <summary>The type of the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateSchemaDto.IsSingleton">
            <summary>Set to true to allow a single content item only.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaDto.Properties">
            <summary>The optional properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaDto.Scripts">
            <summary>The optional scripts.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaDto.FieldsInReferences">
            <summary>The names of the fields that should be used in references.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaDto.FieldsInLists">
            <summary>The names of the fields that should be shown in lists, including meta fields.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaDto.Fields">
            <summary>Optional fields.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaDto.PreviewUrls">
            <summary>The optional preview urls.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaDto.FieldRules">
            <summary>The optional field Rules.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaDto.Category">
            <summary>The category.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaDto.IsPublished">
            <summary>Set it to true to autopublish the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaFieldDto.Name">
            <summary>The name of the field. Must be unique within the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaFieldDto.IsHidden">
            <summary>Defines if the field is hidden.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaFieldDto.IsLocked">
            <summary>Defines if the field is locked.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaFieldDto.IsDisabled">
            <summary>Defines if the field is disabled.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaFieldDto.Partitioning">
            <summary>Determines the optional partitioning of the field.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaFieldDto.Properties">
            <summary>The field properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaFieldDto.Nested">
            <summary>The nested fields.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaNestedFieldDto.Name">
            <summary>The name of the field. Must be unique within the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaNestedFieldDto.IsHidden">
            <summary>Defines if the field is hidden.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaNestedFieldDto.IsLocked">
            <summary>Defines if the field is locked.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaNestedFieldDto.IsDisabled">
            <summary>Defines if the field is disabled.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertSchemaNestedFieldDto.Properties">
            <summary>The field properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateSchemaDto.Label">
            <summary>Optional label for the editor.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateSchemaDto.Hints">
            <summary>Hints to describe the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateSchemaDto.ContentsSidebarUrl">
            <summary>The url to a the sidebar plugin for content lists.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateSchemaDto.ContentSidebarUrl">
            <summary>The url to a the sidebar plugin for content items.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateSchemaDto.ContentEditorUrl">
            <summary>The url to the editor plugin.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateSchemaDto.ValidateOnPublish">
            <summary>True to validate the content items on publish.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateSchemaDto.Tags">
            <summary>Tags for automation processes.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SynchronizeSchemaDto.NoFieldDeletion">
            <summary>True, when fields should not be deleted.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SynchronizeSchemaDto.NoFieldRecreation">
            <summary>True, when fields with different types should not be recreated.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ChangeCategoryDto.Name">
            <summary>The name of the category.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ConfigureFieldRulesDto.FieldRules">
            <summary>The field rules to configure.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleElementDto.Description">
            <summary>Describes the action or trigger type.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleElementDto.Display">
            <summary>The label for the action or trigger type.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleElementDto.Title">
            <summary>Optional title.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleElementDto.IconColor">
            <summary>The color for the icon.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleElementDto.IconImage">
            <summary>The image for the icon.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleElementDto.ReadMore">
            <summary>The optional link to the product that is integrated.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleElementDto.Properties">
            <summary>The properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleElementPropertyDto.Editor">
            <summary>The html editor.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleElementPropertyDto.Name">
            <summary>The name of the editor.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleElementPropertyDto.Display">
            <summary>The label to use.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleElementPropertyDto.Options">
            <summary>The options, if the editor is a dropdown.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleElementPropertyDto.Description">
            <summary>The optional description.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleElementPropertyDto.IsFormattable">
            <summary>Indicates if the property is formattable.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleElementPropertyDto.IsRequired">
            <summary>Indicates if the property is required.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RulesDto.Items">
            <summary>The rules.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RulesDto.RunningRuleId">
            <summary>The id of the rule that is currently rerunning.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleDto.Id">
            <summary>The id of the rule.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleDto.CreatedBy">
            <summary>The user that has created the rule.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleDto.LastModifiedBy">
            <summary>The user that has updated the rule.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleDto.Created">
            <summary>The date and time when the rule has been created.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleDto.LastModified">
            <summary>The date and time when the rule has been modified last.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleDto.Version">
            <summary>The version of the rule.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleDto.IsEnabled">
            <summary>Determines if the rule is enabled.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleDto.Name">
            <summary>Optional rule name.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleDto.Trigger">
            <summary>The trigger properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleDto.Action">
            <summary>The action properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleDto.NumSucceeded">
            <summary>The number of completed executions.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleDto.NumFailed">
            <summary>The number of failed executions.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleDto.LastExecuted">
            <summary>The date and time when the rule was executed the last time.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetChangedRuleTriggerDto.Condition">
            <summary>Javascript condition when to trigger.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CommentRuleTriggerDto.Condition">
            <summary>Javascript condition when to trigger.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentChangedRuleTriggerDto.Schemas">
            <summary>The schema settings.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentChangedRuleTriggerDto.HandleAll">
            <summary>Determines whether the trigger should handle all content changes events.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentChangedRuleTriggerSchemaDto.SchemaId">
            <summary>The id of the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContentChangedRuleTriggerSchemaDto.Condition">
            <summary>Javascript condition when to trigger.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SchemaChangedRuleTriggerDto.Condition">
            <summary>Javascript condition when to trigger.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UsageRuleTriggerDto.Limit">
            <summary>The number of monthly api calls.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UsageRuleTriggerDto.NumDays">
            <summary>The number of days to check or null for the current month.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateRuleDto.Trigger">
            <summary>The trigger properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateRuleDto.Action">
            <summary>The action properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateRuleDto.Name">
            <summary>Optional rule name.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateRuleDto.Trigger">
            <summary>The trigger properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateRuleDto.Action">
            <summary>The action properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateRuleDto.IsEnabled">
            <summary>Enable or disable the rule.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SimulatedRuleEventsDto.Items">
            <summary>The simulated rule events.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SimulatedRuleEventsDto.Total">
            <summary>The total number of simulated rule events.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SimulatedRuleEventDto.EventName">
            <summary>The name of the event.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SimulatedRuleEventDto.Event">
            <summary>The source event.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SimulatedRuleEventDto.EnrichedEvent">
            <summary>The enriched event.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SimulatedRuleEventDto.ActionName">
            <summary>The data for the action.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SimulatedRuleEventDto.ActionData">
            <summary>The name of the action.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SimulatedRuleEventDto.Error">
            <summary>The name of the event.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SimulatedRuleEventDto.SkipReasons">
            <summary>The reason why the event has been skipped.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleEventsDto.Items">
            <summary>The rule events.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleEventsDto.Total">
            <summary>The total number of rule events.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleEventDto.Id">
            <summary>The id of the event.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleEventDto.Created">
            <summary>The time when the event has been created.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleEventDto.Description">
            <summary>The description.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleEventDto.EventName">
            <summary>The name of the event.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleEventDto.LastDump">
            <summary>The last dump.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleEventDto.NumCalls">
            <summary>The number of calls.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleEventDto.NextAttempt">
            <summary>The next attempt.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleEventDto.Result">
            <summary>The result of the event.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RuleEventDto.JobResult">
            <summary>The result of the job.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppPlansDto.Plans">
            <summary>The available plans.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppPlansDto.CurrentPlanId">
            <summary>The current plan id.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppPlansDto.PlanOwner">
            <summary>The plan owner.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppPlansDto.HasPortal">
            <summary>Indicates if there is a billing portal.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PlanDto.Id">
            <summary>The id of the plan.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PlanDto.Name">
            <summary>The name of the plan.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PlanDto.Costs">
            <summary>The monthly costs of the plan.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PlanDto.ConfirmText">
            <summary>An optional confirm text for the monthly subscription.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PlanDto.YearlyConfirmText">
            <summary>An optional confirm text for the yearly subscription.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PlanDto.YearlyCosts">
            <summary>The yearly costs of the plan.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PlanDto.YearlyId">
            <summary>The yearly id of the plan.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PlanDto.MaxApiBytes">
            <summary>The maximum number of API traffic.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PlanDto.MaxApiCalls">
            <summary>The maximum number of API calls.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PlanDto.MaxAssetSize">
            <summary>The maximum allowed asset size.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PlanDto.MaxContributors">
            <summary>The maximum number of contributors.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PlanChangedDto.RedirectUri">
            <summary>Optional redirect uri.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ChangePlanDto.PlanId">
            <summary>The new plan id.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FeaturesDto.Features">
            <summary>The latest features.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FeaturesDto.Version">
            <summary>The recent version.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FeatureDto.Name">
            <summary>The name of the feature.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FeatureDto.Text">
            <summary>The description text.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.LanguageDto.Iso2Code">
            <summary>The iso code of the language.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.LanguageDto.EnglishName">
            <summary>The english name of the language.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.HistoryEventDto.Message">
            <summary>The message for the event.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.HistoryEventDto.EventType">
            <summary>The type of the original event.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.HistoryEventDto.Actor">
            <summary>The user who called the action.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.HistoryEventDto.EventId">
            <summary>Gets a unique id for the event.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.HistoryEventDto.Created">
            <summary>The time when the event happened.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.HistoryEventDto.Version">
            <summary>The version identifier.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CommentsDto.CreatedComments">
            <summary>The created comments including the updates.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CommentsDto.UpdatedComments">
            <summary>The updates comments since the last version.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CommentsDto.DeletedComments">
            <summary>The deleted comments since the last version.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CommentsDto.Version">
            <summary>The current version.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CommentDto.Id">
            <summary>The id of the comment.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CommentDto.Time">
            <summary>The time when the comment was created or updated last.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CommentDto.User">
            <summary>The user who created or updated the comment.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CommentDto.Text">
            <summary>The text of the comment.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CommentDto.Url">
            <summary>The url where the comment is created.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertCommentDto.Text">
            <summary>The comment text.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpsertCommentDto.Url">
            <summary>The url where the comment is created.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BackupJobsDto.Items">
            <summary>The backups.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BackupJobDto.Id">
            <summary>The id of the backup job.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BackupJobDto.Started">
            <summary>The time when the job has been started.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BackupJobDto.Stopped">
            <summary>The time when the job has been stopped.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BackupJobDto.HandledEvents">
            <summary>The number of handled events.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BackupJobDto.HandledAssets">
            <summary>The number of handled assets.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BackupJobDto.Status">
            <summary>The status of the operation.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RestoreJobDto.Url">
            <summary>The uri to load from.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RestoreJobDto.Log">
            <summary>The status log.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RestoreJobDto.Started">
            <summary>The time when the job has been started.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RestoreJobDto.Stopped">
            <summary>The time when the job has been stopped.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RestoreJobDto.Status">
            <summary>The status of the operation.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RestoreRequestDto.Name">
            <summary>The name of the app.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RestoreRequestDto.Url">
            <summary>The url to the restore file.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetFoldersDto.Total">
            <summary>The total number of assets.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetFoldersDto.Items">
            <summary>The assets folders.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetFoldersDto.Path">
            <summary>The path to the current folder.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetFolderDto.Id">
            <summary>The id of the asset.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetFolderDto.ParentId">
            <summary>The id of the parent folder. Empty for files without parent.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetFolderDto.FolderName">
            <summary>The folder name.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetFolderDto.Version">
            <summary>The version of the asset folder.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateAssetFolderDto.FolderName">
            <summary>The name of the folder.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateAssetFolderDto.ParentId">
            <summary>The id of the parent folder.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RenameAssetFolderDto.FolderName">
            <summary>The name of the folder.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.MoveAssetFolderDto.ParentId">
            <summary>The parent folder id.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsDto.Total">
            <summary>The total number of assets.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetsDto.Items">
            <summary>The assets.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.Id">
            <summary>The id of the asset.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.ParentId">
            <summary>The id of the parent folder. Empty for files without parent.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.FileName">
            <summary>The file name.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.FileHash">
            <summary>The file hash.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.IsProtected">
            <summary>True, when the asset is not public.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.Slug">
            <summary>The slug.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.MimeType">
            <summary>The mime type.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.FileType">
            <summary>The file type.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.MetadataText">
            <summary>The formatted text representation of the metadata.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.Metadata">
            <summary>The asset metadata.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.Tags">
            <summary>The asset tags.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.FileSize">
            <summary>The size of the file in bytes.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.FileVersion">
            <summary>The version of the file.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.Type">
            <summary>The type of the asset.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.CreatedBy">
            <summary>The user that has created the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.LastModifiedBy">
            <summary>The user that has updated the asset.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.Created">
            <summary>The date and time when the asset has been created.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.LastModified">
            <summary>The date and time when the asset has been modified last.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.Version">
            <summary>The version of the asset.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto._meta">
            <summary>The metadata.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.IsImage">
            <summary>Determines of the created file is an image.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.PixelWidth">
            <summary>The width of the image in pixels if the asset is an image.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetDto.PixelHeight">
            <summary>The height of the image in pixels if the asset is an image.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetMeta.IsDuplicate">
            <summary>Indicates whether the asset is a duplicate.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateAssetsDto.Jobs">
            <summary>The contents to update or insert.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateAssetsDto.CheckReferrers">
            <summary>True to check referrers of deleted assets.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateAssetsDto.OptimizeValidation">
            <summary>True to turn off costly validation: Folder checks. Default: true.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateAssetsDto.DoNotScript">
            <summary>True to turn off scripting for faster inserts. Default: true.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateAssetsJobDto.Id">
            <summary>An optional id of the asset to update.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateAssetsJobDto.Type">
            <summary>The update type.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateAssetsJobDto.ParentId">
            <summary>The parent folder id.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateAssetsJobDto.FileName">
            <summary>The new name of the asset.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateAssetsJobDto.Slug">
            <summary>The new slug of the asset.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateAssetsJobDto.IsProtected">
            <summary>True, when the asset is not public.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateAssetsJobDto.Tags">
            <summary>The new asset tags.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateAssetsJobDto.Metadata">
            <summary>The asset metadata.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateAssetsJobDto.Permanent">
            <summary>True to delete the asset permanently.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.BulkUpdateAssetsJobDto.ExpectedVersion">
            <summary>The expected version.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AnnotateAssetDto.FileName">
            <summary>The new name of the asset.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AnnotateAssetDto.Slug">
            <summary>The new slug of the asset.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AnnotateAssetDto.IsProtected">
            <summary>True, when the asset is not public.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AnnotateAssetDto.Tags">
            <summary>The new asset tags.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AnnotateAssetDto.Metadata">
            <summary>The asset metadata.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.MoveAssetDto.ParentId">
            <summary>The parent folder id.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetScriptsDto.Create">
            <summary>The script that is executed when creating an asset.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetScriptsDto.Update">
            <summary>The script that is executed when updating a content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetScriptsDto.Annotate">
            <summary>The script that is executed when annotating a content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetScriptsDto.Move">
            <summary>The script that is executed when moving a content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetScriptsDto.Delete">
            <summary>The script that is executed when deleting a content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssetScriptsDto.Version">
            <summary>The version of the app.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateAssetScriptsDto.Create">
            <summary>The script that is executed when creating an asset.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateAssetScriptsDto.Update">
            <summary>The script that is executed when updating a content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateAssetScriptsDto.Annotate">
            <summary>The script that is executed when annotating a content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateAssetScriptsDto.Move">
            <summary>The script that is executed when moving a content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateAssetScriptsDto.Delete">
            <summary>The script that is executed when deleting a content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ClientsDto.Items">
            <summary>The clients.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ClientDto.Id">
            <summary>The client id.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ClientDto.Secret">
            <summary>The client secret.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ClientDto.Name">
            <summary>The client name.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ClientDto.Role">
            <summary>The role of the client.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ClientDto.ApiCallsLimit">
            <summary>The number of allowed api calls per month for this client.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ClientDto.ApiTrafficLimit">
            <summary>The number of allowed api traffic bytes per month for this client.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ClientDto.AllowAnonymous">
            <summary>True to allow anonymous access without an access token for this client.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateClientDto.Id">
            <summary>The id of the client.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateClientDto.Name">
            <summary>The new display name of the client.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateClientDto.Role">
            <summary>The role of the client.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateClientDto.AllowAnonymous">
            <summary>True to allow anonymous access without an access token for this client.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateClientDto.ApiCallsLimit">
            <summary>The number of allowed api calls per month for this client.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateClientDto.ApiTrafficLimit">
            <summary>The number of allowed api traffic bytes per month for this client.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContributorsDto.Items">
            <summary>The contributors.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContributorsDto.MaxContributors">
            <summary>The maximum number of allowed contributors.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContributorsDto._meta">
            <summary>The metadata to provide information about this request.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContributorDto.ContributorId">
            <summary>The id of the user that contributes to the app.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContributorDto.ContributorName">
            <summary>The display name.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContributorDto.ContributorEmail">
            <summary>The email address.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContributorDto.Role">
            <summary>The role of the contributor.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ContributorsMetadata.IsInvited">
            <summary>Indicates whether the user has been invited.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssignContributorDto.ContributorId">
            <summary>The id or email of the user to add to the app.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssignContributorDto.Role">
            <summary>The role of the contributor.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AssignContributorDto.Invite">
            <summary>Set to true to invite the user if he does not exist.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppLanguagesDto.Items">
            <summary>The languages.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppLanguageDto.Iso2Code">
            <summary>The iso code of the language.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppLanguageDto.EnglishName">
            <summary>The english name of the language.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppLanguageDto.Fallback">
            <summary>The fallback languages.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppLanguageDto.IsMaster">
            <summary>Indicates if the language is the master language.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppLanguageDto.IsOptional">
            <summary>Indicates if the language is optional.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AddLanguageDto.Language">
            <summary>The language to add.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateLanguageDto.IsMaster">
            <summary>Set the value to true to make the language the master.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateLanguageDto.IsOptional">
            <summary>Set the value to true to make the language optional.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateLanguageDto.Fallback">
            <summary>Optional fallback languages.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RolesDto.Items">
            <summary>The roles.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RoleDto.Name">
            <summary>The role name.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RoleDto.NumClients">
            <summary>The number of clients with this role.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RoleDto.NumContributors">
            <summary>The number of contributors with this role.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RoleDto.IsDefaultRole">
            <summary>Indicates if the role is an builtin default role.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RoleDto.Permissions">
            <summary>Associated list of permissions.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.RoleDto.Properties">
            <summary>Associated list of UI properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AddRoleDto.Name">
            <summary>The role name.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateRoleDto.Permissions">
            <summary>Associated list of permissions.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateRoleDto.Properties">
            <summary>Associated list of UI properties.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppDto.Name">
            <summary>The name of the app.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppDto.Label">
            <summary>The optional label of the app.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppDto.Description">
            <summary>The optional description of the app.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppDto.Version">
            <summary>The version of the app.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppDto.Id">
            <summary>The id of the app.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppDto.Created">
            <summary>The timestamp when the app has been created.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppDto.LastModified">
            <summary>The timestamp when the app has been modified last.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppDto.Permissions">
            <summary>The permission level of the user.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppDto.CanAccessApi">
            <summary>Indicates if the user can access the api.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppDto.CanAccessContent">
            <summary>Indicates if the user can access at least one content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppDto.RoleProperties">
            <summary>The properties from the role.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateAppDto.Name">
            <summary>The name of the app.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateAppDto.Template">
            <summary>Initialize the app with the inbuilt template.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateAppDto.Label">
            <summary>The optional label of your app.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateAppDto.Description">
            <summary>The optional description of your app.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppSettingsDto.Patterns">
            <summary>The configured app patterns.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppSettingsDto.Editors">
            <summary>The configured UI editors.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppSettingsDto.HideScheduler">
            <summary>Hide the scheduler for content items.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppSettingsDto.HideDateTimeModeButton">
            <summary>Hide the datetime mode button.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AppSettingsDto.Version">
            <summary>The version of the app.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PatternDto.Name">
            <summary>The name of the suggestion.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PatternDto.Regex">
            <summary>The regex pattern.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PatternDto.Message">
            <summary>The regex message.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.EditorDto.Name">
            <summary>The name of the editor.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.EditorDto.Url">
            <summary>The url to the editor.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateAppSettingsDto.Patterns">
            <summary>The configured app patterns.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateAppSettingsDto.Editors">
            <summary>The configured UI editors.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateAppSettingsDto.HideScheduler">
            <summary>Hide the scheduler for content items.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateAppSettingsDto.HideDateTimeModeButton">
            <summary>Hide the datetime mode button.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WorkflowsDto.Items">
            <summary>The workflow.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WorkflowsDto.Errors">
            <summary>The errros that should be fixed.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WorkflowDto.Id">
            <summary>The workflow id.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WorkflowDto.Name">
            <summary>The name of the workflow.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WorkflowDto.Steps">
            <summary>The workflow steps.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WorkflowDto.SchemaIds">
            <summary>The schema ids.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WorkflowDto.Initial">
            <summary>The initial step.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WorkflowStepDto.Transitions">
            <summary>The transitions.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WorkflowStepDto.Color">
            <summary>The optional color.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WorkflowStepDto.NoUpdate">
            <summary>Indicates if updates should not be allowed.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WorkflowStepDto.NoUpdateExpression">
            <summary>Optional expression that must evaluate to true when you want to prevent updates.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WorkflowStepDto.NoUpdateRoles">
            <summary>Optional list of roles to restrict the updates for users with these roles.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WorkflowTransitionDto.Expression">
            <summary>The optional expression.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WorkflowTransitionDto.Roles">
            <summary>The optional restricted role.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AddWorkflowDto.Name">
            <summary>The name of the workflow.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateWorkflowDto.Name">
            <summary>The name of the workflow.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateWorkflowDto.Steps">
            <summary>The workflow steps.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateWorkflowDto.SchemaIds">
            <summary>The schema ids.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.UpdateWorkflowDto.Initial">
            <summary>The initial step.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WebhookRuleActionDto.Url">
            <summary>The url to the webhook.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WebhookRuleActionDto.Method">
            <summary>The type of the request.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WebhookRuleActionDto.Payload">
            <summary>Leave it empty to use the full event as body.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WebhookRuleActionDto.PayloadType">
            <summary>The mime type of the payload.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WebhookRuleActionDto.Headers">
            <summary>The message headers in the format '[Key]=[Value]', one entry per line.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.WebhookRuleActionDto.SharedSecret">
            <summary>The shared secret that is used to calculate the payload signature.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.TweetRuleActionDto.AccessToken">
            <summary> The generated access token.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.TweetRuleActionDto.AccessSecret">
            <summary> The generated access secret.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.TweetRuleActionDto.Text">
            <summary>The text that is sent as tweet to twitter.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SlackRuleActionDto.WebhookUrl">
            <summary>The slack webhook url.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SlackRuleActionDto.Text">
            <summary>The text that is sent as message to slack.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SignalRRuleActionDto.ConnectionString">
            <summary>The connection string to the Azure SignalR.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SignalRRuleActionDto.HubName">
            <summary>The name of the hub.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SignalRRuleActionDto.Action">
            <summary>* Broadcast = send to all users.
            <br/> * User = send to all target users(s).
            <br/> * Group = send to all target group(s).</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SignalRRuleActionDto.MethodName">
            <summary>Set the Name of the hub method received by the customer.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SignalRRuleActionDto.Target">
            <summary>Define target users or groups by id or name. One item per line. Not needed for Broadcast action.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.SignalRRuleActionDto.Payload">
            <summary>Leave it empty to use the full event as body.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ScriptRuleActionDto.Script">
            <summary>The script to render.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PrerenderRuleActionDto.Token">
            <summary>The prerender token from your account.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.PrerenderRuleActionDto.Url">
            <summary>The url to recache.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NotificationRuleActionDto.User">
            <summary>The user id or email.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NotificationRuleActionDto.Text">
            <summary>The text to send.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NotificationRuleActionDto.Url">
            <summary>The optional url to attach to the notification.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.NotificationRuleActionDto.Client">
            <summary>An optional client name.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.MediumRuleActionDto.AccessToken">
            <summary>The self issued access token.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.MediumRuleActionDto.Title">
            <summary>The title, used for the url.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.MediumRuleActionDto.Content">
            <summary>The content, either html or markdown.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.MediumRuleActionDto.CanonicalUrl">
            <summary>The original home of this content, if it was originally published elsewhere.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.MediumRuleActionDto.Tags">
            <summary>The optional comma separated list of tags.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.MediumRuleActionDto.PublicationId">
            <summary>Optional publication id.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.MediumRuleActionDto.IsHtml">
            <summary>Indicates whether the content is markdown or html.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FastlyRuleActionDto.ApiKey">
            <summary>The API key to grant access to Squidex.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.FastlyRuleActionDto.ServiceId">
            <summary>The ID of the fastly service.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.EmailRuleActionDto.ServerHost">
            <summary>The IP address or host to the SMTP server.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.EmailRuleActionDto.ServerPort">
            <summary>The port to the SMTP server.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.EmailRuleActionDto.ServerUsername">
            <summary>The username for the SMTP server.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.EmailRuleActionDto.ServerPassword">
            <summary>The password for the SMTP server.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.EmailRuleActionDto.MessageFrom">
            <summary>The email sending address.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.EmailRuleActionDto.MessageTo">
            <summary>The email message will be sent to.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.EmailRuleActionDto.MessageSubject">
            <summary>The subject line for this email message.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.EmailRuleActionDto.MessageBody">
            <summary>The message body.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ElasticSearchRuleActionDto.Host">
            <summary>The url to the elastic search instance or cluster.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ElasticSearchRuleActionDto.IndexName">
            <summary>The name of the index.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ElasticSearchRuleActionDto.Username">
            <summary>The optional username.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ElasticSearchRuleActionDto.Password">
            <summary>The optional password.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ElasticSearchRuleActionDto.Document">
            <summary>The optional custom document.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.ElasticSearchRuleActionDto.Delete">
            <summary>The condition when to delete the document.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.DiscourseRuleActionDto.Url">
            <summary>The url to the discourse server.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.DiscourseRuleActionDto.ApiKey">
            <summary>The api key to authenticate to your discourse server.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.DiscourseRuleActionDto.ApiUsername">
            <summary>The api username to authenticate to your discourse server.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.DiscourseRuleActionDto.Text">
            <summary>The text as markdown.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.DiscourseRuleActionDto.Title">
            <summary>The optional title when creating new topics.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.DiscourseRuleActionDto.Topic">
            <summary>The optional topic id.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.DiscourseRuleActionDto.Category">
            <summary>The optional category id.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateContentRuleActionDto.Data">
            <summary>The content data.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateContentRuleActionDto.Schema">
            <summary>The name of the schema.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateContentRuleActionDto.Client">
            <summary>An optional client name.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CreateContentRuleActionDto.Publish">
            <summary>Publish the content.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CommentRuleActionDto.Text">
            <summary>The comment text.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.CommentRuleActionDto.Client">
            <summary>An optional client name.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AzureQueueRuleActionDto.ConnectionString">
            <summary>The connection string to the storage account.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AzureQueueRuleActionDto.Queue">
            <summary>The name of the queue.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AzureQueueRuleActionDto.Payload">
            <summary>Leave it empty to use the full event as body.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AlgoliaRuleActionDto.AppId">
            <summary>The application ID.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AlgoliaRuleActionDto.ApiKey">
            <summary>The API key to grant access to Squidex.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AlgoliaRuleActionDto.IndexName">
            <summary>The name of the index.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AlgoliaRuleActionDto.Document">
            <summary>The optional custom document.</summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.AlgoliaRuleActionDto.Delete">
            <summary>The condition when to delete the entry.</summary>
        </member>
        <member name="T:Squidex.ClientLibrary.Management.JsonInheritanceConverter">
            <summary>
            A json converter that can handle inheritance.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="P:Squidex.ClientLibrary.Management.JsonInheritanceConverter.DiscriminatorName">
            <summary>
            Gets the name of the discriminator property.
            </summary>
            <value>
            The name of the discriminator property.
            </value>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.JsonInheritanceConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squidex.ClientLibrary.Management.JsonInheritanceConverter"/> class.
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.JsonInheritanceConverter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Squidex.ClientLibrary.Management.JsonInheritanceConverter"/> class with the name.
            of the discriminator property.
            </summary>
            <param name="discriminator">The name of the discriminator property.</param>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.JsonInheritanceConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.JsonInheritanceConverter.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:Squidex.ClientLibrary.Management.JsonInheritanceConverter.CanRead">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.JsonInheritanceConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.JsonInheritanceConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.Management.JsonInheritanceConverter.GetDiscriminatorValue(System.Type)">
            <summary>
            Gets the discriminator value for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The discriminator value for the specified type.
            </returns>
        </member>
        <member name="T:Squidex.ClientLibrary.QueryContext">
            <summary>
            The context object to add additonal headers to the request and
            change the behavior of the API when querying content items.
            </summary>
            <remarks>
            This class is immutable and creates a new instance when using any method.
            </remarks>
        </member>
        <member name="F:Squidex.ClientLibrary.QueryContext.Default">
            <summary>
            The default behavior.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.QueryContext.AssetUrlsToResolve">
            <summary>
            Gets the asset fields where the ID should be converted to URLs.
            </summary>
            <value>
            The asset fields where the ID should be converted to URLs.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.QueryContext.Languages">
            <summary>
            Gets the languages to deliver.
            </summary>
            <value>
            The languages to deliver.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.QueryContext.IsFlatten">
            <summary>
            Gets a value indicating whether content items will be flatten.
            </summary>
            <value>
              <c>true</c> if content items will be flatten; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.QueryContext.IsUnpublished">
            <summary>
            Gets a value indicating whether unpublished content items will be returned.
            </summary>
            <value>
              <c>true</c> if unpublished content items will be returned; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.QueryContext.IsNotUsingCDN">
            <summary>
            Gets a value indicating whether the Content CDN will not be used.
            </summary>
            <value>
              <c>true</c> if the Content CDN will not be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.QueryContext.IsNotQueryingTotal">
            <summary>
            Gets a value indicating whether the total number of results should not be returned.
            </summary>
            <value>
              <c>true</c> if the total number of results should not be returned; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.QueryContext.IsNotQueryingSlowTotal">
            <summary>
            Gets a value indicating whether the total number of results should not be returned for slow queries.
            </summary>
            <value>
              <c>true</c> if the total number of results should not be returned for slow queries; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.QueryContext.IsIgnoreFallback">
            <summary>
            Gets a value indicating whether fallback handling for undefined field languages will be turned off.
            </summary>
            <value>
              <c>true</c> if fallback handling for undefined field languages will be turned off; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Squidex.ClientLibrary.QueryContext.Flatten(System.Boolean)">
            <summary>
            Creates a new copy of the context object and defines whether content items will be flatten.
            </summary>
            <param name="flatten">if set to <c>true</c> content items will be flatten.</param>
            <returns>
            The new query context.
            </returns>
        </member>
        <member name="M:Squidex.ClientLibrary.QueryContext.Unpublished(System.Boolean)">
            <summary>
            Creates a new copy of the context object and defines whether unpublished content items will be deliverd.
            </summary>
            <param name="unpublished">if set to <c>true</c> unpublished content items will be returned.</param>
            <returns>
            The new query context.
            </returns>
        </member>
        <member name="M:Squidex.ClientLibrary.QueryContext.WithoutCDN(System.Boolean)">
            <summary>
            Creates a new copy of the context object and defines whether the Content CDN will not be used.
            </summary>
            <param name="value">if set to <c>true</c> the Content CDN will not be used.</param>
            <returns>
            The new query context.
            </returns>
        </member>
        <member name="M:Squidex.ClientLibrary.QueryContext.WithoutTotal(System.Boolean)">
            <summary>
            Creates a new copy of the context object and defines whether the total number of results should not be returned.
            </summary>
            <param name="value">if set to <c>true</c> the total number of results should not be returned.</param>
            <returns>
            The new query context.
            </returns>
        </member>
        <member name="M:Squidex.ClientLibrary.QueryContext.WithoutSlowTotal(System.Boolean)">
            <summary>
            Creates a new copy of the context object and defines whether the total number of results should not be returned for slow queries.
            </summary>
            <param name="value">if set to <c>true</c> the total number of results should not be returned for slow queries.</param>
            <returns>
            The new query context.
            </returns>
        </member>
        <member name="M:Squidex.ClientLibrary.QueryContext.ResolveAssetUrls(System.String[])">
            <summary>
            Creates a new copy of the context object and defines which asset fields should be resolved.
            </summary>
            <param name="urls">The asset fields to resolve.</param>
            <returns>
            The new query context.
            </returns>
        </member>
        <member name="M:Squidex.ClientLibrary.QueryContext.WithLanguages(System.String[])">
            <summary>
            Creates a new copy of the context object with the language objects to deliver.
            </summary>
            <param name="languages">The languages to deliver.</param>
            <returns>
            The new query context.
            </returns>
        </member>
        <member name="M:Squidex.ClientLibrary.QueryContext.IgnoreFallback(System.Boolean)">
            <summary>
            Creates a new copy of the context object and defines fallback handling for undefined field languages will be turned off.
            </summary>
            <param name="value">if set to <c>true</c> fallback handling for undefined field languages will be turned off.</param>
            <returns>
            The new query context.
            </returns>
        </member>
        <member name="T:Squidex.ClientLibrary.Resource">
            <summary>
            Represents a resource, which is an entity or collection of entities that are delivered by the API.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Resource.Links">
            <summary>
            Gets the links of this resource.
            </summary>
            <value>
            The links of this resource.
            </value>
        </member>
        <member name="T:Squidex.ClientLibrary.ResourceLink">
            <summary>
            Represents a link of a resource.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.ResourceLink.Href">
            <summary>
            Gets or sets the URL to the link.
            </summary>
            <value>
            The URL to the link.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.ResourceLink.Method">
            <summary>
            Gets or sets the HTTP method of the endpoint where the link points to.
            </summary>
            <value>
            The HTTP method of the endpoint where the link points to.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.ResourceLink.Metadata">
            <summary>
            Gets or sets the additional metadata for the link.
            </summary>
            <value>
            The additional metadata for the link.
            </value>
        </member>
        <member name="T:Squidex.ClientLibrary.SquidexClientManager">
            <summary>
            Default implementation of the <see cref="T:Squidex.ClientLibrary.ISquidexClientManager"/> interface.
            </summary>
            <seealso cref="T:Squidex.ClientLibrary.ISquidexClientManager" />
        </member>
        <member name="P:Squidex.ClientLibrary.SquidexClientManager.App">
            <inheritdoc/>
        </member>
        <member name="P:Squidex.ClientLibrary.SquidexClientManager.Options">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.#ctor(Squidex.ClientLibrary.SquidexOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Squidex.ClientLibrary.SquidexClientManager"/> class with the options.
            </summary>
            <param name="options">The options. Cannot be null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="options"/> is null.</exception>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.GenerateImageUrl(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.GenerateImageUrl(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreateAppsClient">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreateAssetsClient">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreateBackupsClient">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreateCommentsClient">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreateHistoryClient">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreateLanguagesClient">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreatePingClient">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreatePlansClient">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreateRulesClient">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreateSchemasClient">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreateStatisticsClient">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreateUsersClient">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreateExtendableRulesClient">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreateContentsClient``2(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreateDynamicContentsClient(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexClientManager.CreateHttpClient">
            <inheritdoc/>
        </member>
        <member name="M:Squidex.ClientLibrary.SquidexGraphQlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Squidex.ClientLibrary.SquidexOptions">
            <summary>
            The options to configure <see cref="T:Squidex.ClientLibrary.SquidexClientManager"/>.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.SquidexOptions.Url">
            <summary>
            Gets or sets the URL to the Squidex installation.
            </summary>
            <value>
            The URL to the Squidex installation.
            </value>
            <remarks>
            Defaults to 'https://cloud.squidex.io'.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Option is frozen and cannot be changed anymore.</exception>
        </member>
        <member name="P:Squidex.ClientLibrary.SquidexOptions.AppName">
            <summary>
            Gets or sets the name of the application.
            </summary>
            <value>
            The name of the application. This is a required option.
            </value>
            <exception cref="T:System.InvalidOperationException">Option is frozen and cannot be changed anymore.</exception>
        </member>
        <member name="P:Squidex.ClientLibrary.SquidexOptions.ClientId">
            <summary>
            Gets or sets the client identifier.
            </summary>
            <value>
            The client identifier. This is a required option.
            </value>
            <exception cref="T:System.InvalidOperationException">Option is frozen and cannot be changed anymore.</exception>
        </member>
        <member name="P:Squidex.ClientLibrary.SquidexOptions.ClientSecret">
            <summary>
            Gets or sets the client secret.
            </summary>
            <value>
            The client secret. This is a required option.
            </value>
            <exception cref="T:System.InvalidOperationException">Option is frozen and cannot be changed anymore.</exception>
        </member>
        <member name="P:Squidex.ClientLibrary.SquidexOptions.ContentCDN">
            <summary>
            Gets or sets the optional URL to the content CDN.
            </summary>
            <value>
            The optional URL to the content CDN.
            </value>
            <exception cref="T:System.InvalidOperationException">Option is frozen and cannot be changed anymore.</exception>
        </member>
        <member name="P:Squidex.ClientLibrary.SquidexOptions.AssetCDN">
            <summary>
            Gets or sets the optional URL to the asset CDN.
            </summary>
            <value>
            The optional URL to the asset CDN.
            </value>
            <exception cref="T:System.InvalidOperationException">Option is frozen and cannot be changed anymore.</exception>
        </member>
        <member name="P:Squidex.ClientLibrary.SquidexOptions.ReadResponseAsString">
            <summary>
            Gets or sets a value indicating whether responses are read as string.
            </summary>
            <value>
              <c>true</c> if responses are read as string; otherwise, <c>false</c>.
            </value>
            <remarks>
            This is useful for debugging but has impacts to performance.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Option is frozen and cannot be changed anymore.</exception>
        </member>
        <member name="P:Squidex.ClientLibrary.SquidexOptions.Authenticator">
            <summary>
            Gets or sets the authenticator.
            </summary>
            <value>
            The authenticator. This is a required option.
            </value>
            <exception cref="T:System.InvalidOperationException">Option is frozen and cannot be changed anymore.</exception>
        </member>
        <member name="P:Squidex.ClientLibrary.SquidexOptions.Configurator">
            <summary>
            Gets or sets the configurator that can be used to make changes to the HTTP requests.
            </summary>
            <value>
            The configurator.
            </value>
            <exception cref="T:System.InvalidOperationException">Option is frozen and cannot be changed anymore.</exception>
        </member>
        <member name="P:Squidex.ClientLibrary.SquidexOptions.ClientFactory">
            <summary>
            Gets or sets the client factory.
            </summary>
            <value>
            The client factory.
            </value>
            <exception cref="T:System.InvalidOperationException">Option is frozen and cannot be changed anymore.</exception>
        </member>
        <member name="P:Squidex.ClientLibrary.SquidexOptions.HttpClientTimeout">
            <summary>
            Gets or sets the HTTP client timeout.
            </summary>
            <value>
            The HTTP client timeout.
            </value>
            <exception cref="T:System.InvalidOperationException">Option is frozen and cannot be changed anymore.</exception>
        </member>
        <member name="T:Squidex.ClientLibrary.Status">
            <summary>
            Default status strings.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.Status.Archived">
            <summary>
            Content is Archived (soft-delete).
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.Status.Draft">
            <summary>
            Content is not ready and not available in the API by default.
            </summary>
        </member>
        <member name="F:Squidex.ClientLibrary.Status.Published">
            <summary>
            Content is ready and published.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Status.Name">
            <summary>
            Name of the status.
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.Status.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Squidex.ClientLibrary.Status"/> struct.
            </summary>
            <param name="name">Status name.</param>
        </member>
        <member name="M:Squidex.ClientLibrary.Status.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Status.Equals(Squidex.ClientLibrary.Status)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Status.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Status.ToString">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Status.CompareTo(Squidex.ClientLibrary.Status)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Status.op_Equality(Squidex.ClientLibrary.Status,Squidex.ClientLibrary.Status)">
            <summary>
            Operator to compare to status objects for equality.
            </summary>
            <param name="lhs">The left side of the operator.</param>
            <param name="rhs">The right side of the operator.</param>
        </member>
        <member name="M:Squidex.ClientLibrary.Status.op_Inequality(Squidex.ClientLibrary.Status,Squidex.ClientLibrary.Status)">
            <summary>
            Operator to compare to status objects for inequality.
            </summary>
            <param name="lhs">The left side of the operator.</param>
            <param name="rhs">The right side of the operator.</param>
        </member>
        <member name="M:Squidex.ClientLibrary.Status.op_Implicit(Squidex.ClientLibrary.Status)~System.String">
            <summary>
            Operator to compare the status to a string.
            </summary>
            <param name="status">The status to convert.</param>
        </member>
        <member name="T:Squidex.ClientLibrary.StatusTypeConverter">
            <summary>
            Converter for the Status.
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.StatusTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.StatusTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.StatusTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.StatusTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Squidex.ClientLibrary.UpdateExtendableRuleDto">
            <summary>
            A HTTP request to update a rule.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.UpdateExtendableRuleDto.Name">
            <summary>
            Gets or sets the optional new name of the rule.
            </summary>
            <value>
            The optional new name of the rule.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.UpdateExtendableRuleDto.Trigger">
            <summary>
            Gets or sets the optional new trigger.
            </summary>
            <value>
            The optional new trigger.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.UpdateExtendableRuleDto.Action">
            <summary>
            Gets or sets the optional new action.
            </summary>
            <value>
            The optional new action.
            </value>
        </member>
        <member name="T:Squidex.ClientLibrary.Utils.Actor">
            <summary>
            Represent an actor that make actions.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Utils.Actor.Id">
            <summary>
            Id.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Utils.Actor.Type">
            <summary>
            Type.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.Utils.ActorConverter">
            <summary>
            Convert actor string
            Example of input: "subject:123456789".
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.Utils.ActorConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Utils.ActorConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Utils.ActorConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Utils.AuthenticatingHttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Squidex.ClientLibrary.Utils.NamedId">
            <summary>
            Id with a name.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Utils.NamedId.Id">
            <summary>
            Id.
            </summary>
        </member>
        <member name="P:Squidex.ClientLibrary.Utils.NamedId.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="T:Squidex.ClientLibrary.Utils.NamedIdConverter">
            <summary>
            Convert comma separated string to NamedId
            Example of input: "00000000-0000-0000-0000-000000000000,name".
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.Utils.NamedIdConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Utils.NamedIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Utils.NamedIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Squidex.ClientLibrary.Utils.SquidexClientBase">
            <summary>
            Base class for all clients.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Squidex.ClientLibrary.Utils.SquidexClientBase.ApplicationName">
            <summary>
            Gets the name of the App.
            </summary>
            <value>
            The name of the App.
            </value>
        </member>
        <member name="P:Squidex.ClientLibrary.Utils.SquidexClientBase.Options">
            <summary>
            Gets the options of the <see cref="T:Squidex.ClientLibrary.SquidexClientManager"/>.
            </summary>
            <value>
            The options of the <see cref="T:Squidex.ClientLibrary.SquidexClientManager"/>..
            </value>
        </member>
        <member name="M:Squidex.ClientLibrary.Utils.SquidexClientBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Squidex.ClientLibrary.Utils.UTCIsoDateTimeConverter">
            <summary>
            A Json converter to serialize <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/>
            values to ISO-8601 compliant strings (yyy-MM-dd'T'HH:mm:ss).
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.Utils.UTCIsoDateTimeConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Squidex.ClientLibrary.Utils.UTCIsoDateTimeConverter"/> class.
            </summary>
        </member>
        <member name="M:Squidex.ClientLibrary.Utils.UTCIsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Squidex.ClientLibrary.Utils.UTCIsoDateTimeConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
    </members>
</doc>
